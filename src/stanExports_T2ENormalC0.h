// Generated by rstantools.  Do not edit by hand.

/*
    psBayesborrow is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    psBayesborrow is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with psBayesborrow.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_T2ENormalC0_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_T2ENormalC0");
    reader.add_event(45, 43, "end", "model_T2ENormalC0");
    return reader;
}
#include <stan_meta_header.hpp>
class model_T2ENormalC0
  : public stan::model::model_base_crtp<model_T2ENormalC0> {
private:
        int nCT_o;
        int nCT_c;
        int nCC_o;
        int nEC_o;
        int nEC_c;
        int p;
        vector_d yCT_o;
        vector_d yCT_c;
        vector_d yCC_o;
        vector_d yEC_o;
        vector_d yEC_c;
        std::vector<row_vector_d> xCT_o;
        std::vector<row_vector_d> xCT_c;
        std::vector<row_vector_d> xCC_o;
        std::vector<row_vector_d> xEC_o;
        std::vector<row_vector_d> xEC_c;
        double scale;
public:
    model_T2ENormalC0(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_T2ENormalC0(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_T2ENormalC0_namespace::model_T2ENormalC0";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "nCT_o", "int", context__.to_vec());
            nCT_o = int(0);
            vals_i__ = context__.vals_i("nCT_o");
            pos__ = 0;
            nCT_o = vals_i__[pos__++];
            check_greater_or_equal(function__, "nCT_o", nCT_o, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "nCT_c", "int", context__.to_vec());
            nCT_c = int(0);
            vals_i__ = context__.vals_i("nCT_c");
            pos__ = 0;
            nCT_c = vals_i__[pos__++];
            check_greater_or_equal(function__, "nCT_c", nCT_c, 1);
            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "nCC_o", "int", context__.to_vec());
            nCC_o = int(0);
            vals_i__ = context__.vals_i("nCC_o");
            pos__ = 0;
            nCC_o = vals_i__[pos__++];
            check_greater_or_equal(function__, "nCC_o", nCC_o, 1);
            current_statement_begin__ = 5;
            context__.validate_dims("data initialization", "nEC_o", "int", context__.to_vec());
            nEC_o = int(0);
            vals_i__ = context__.vals_i("nEC_o");
            pos__ = 0;
            nEC_o = vals_i__[pos__++];
            check_greater_or_equal(function__, "nEC_o", nEC_o, 1);
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "nEC_c", "int", context__.to_vec());
            nEC_c = int(0);
            vals_i__ = context__.vals_i("nEC_c");
            pos__ = 0;
            nEC_c = vals_i__[pos__++];
            check_greater_or_equal(function__, "nEC_c", nEC_c, 1);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            check_greater_or_equal(function__, "p", p, 1);
            current_statement_begin__ = 8;
            validate_non_negative_index("yCT_o", "nCT_o", nCT_o);
            context__.validate_dims("data initialization", "yCT_o", "vector_d", context__.to_vec(nCT_o));
            yCT_o = Eigen::Matrix<double, Eigen::Dynamic, 1>(nCT_o);
            vals_r__ = context__.vals_r("yCT_o");
            pos__ = 0;
            size_t yCT_o_j_1_max__ = nCT_o;
            for (size_t j_1__ = 0; j_1__ < yCT_o_j_1_max__; ++j_1__) {
                yCT_o(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 9;
            validate_non_negative_index("yCT_c", "nCT_c", nCT_c);
            context__.validate_dims("data initialization", "yCT_c", "vector_d", context__.to_vec(nCT_c));
            yCT_c = Eigen::Matrix<double, Eigen::Dynamic, 1>(nCT_c);
            vals_r__ = context__.vals_r("yCT_c");
            pos__ = 0;
            size_t yCT_c_j_1_max__ = nCT_c;
            for (size_t j_1__ = 0; j_1__ < yCT_c_j_1_max__; ++j_1__) {
                yCT_c(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("yCC_o", "nCC_o", nCC_o);
            context__.validate_dims("data initialization", "yCC_o", "vector_d", context__.to_vec(nCC_o));
            yCC_o = Eigen::Matrix<double, Eigen::Dynamic, 1>(nCC_o);
            vals_r__ = context__.vals_r("yCC_o");
            pos__ = 0;
            size_t yCC_o_j_1_max__ = nCC_o;
            for (size_t j_1__ = 0; j_1__ < yCC_o_j_1_max__; ++j_1__) {
                yCC_o(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 11;
            validate_non_negative_index("yEC_o", "nEC_o", nEC_o);
            context__.validate_dims("data initialization", "yEC_o", "vector_d", context__.to_vec(nEC_o));
            yEC_o = Eigen::Matrix<double, Eigen::Dynamic, 1>(nEC_o);
            vals_r__ = context__.vals_r("yEC_o");
            pos__ = 0;
            size_t yEC_o_j_1_max__ = nEC_o;
            for (size_t j_1__ = 0; j_1__ < yEC_o_j_1_max__; ++j_1__) {
                yEC_o(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 12;
            validate_non_negative_index("yEC_c", "nEC_c", nEC_c);
            context__.validate_dims("data initialization", "yEC_c", "vector_d", context__.to_vec(nEC_c));
            yEC_c = Eigen::Matrix<double, Eigen::Dynamic, 1>(nEC_c);
            vals_r__ = context__.vals_r("yEC_c");
            pos__ = 0;
            size_t yEC_c_j_1_max__ = nEC_c;
            for (size_t j_1__ = 0; j_1__ < yEC_c_j_1_max__; ++j_1__) {
                yEC_c(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 13;
            validate_non_negative_index("xCT_o", "p", p);
            validate_non_negative_index("xCT_o", "nCT_o", nCT_o);
            context__.validate_dims("data initialization", "xCT_o", "row_vector_d", context__.to_vec(nCT_o,p));
            xCT_o = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(nCT_o, Eigen::Matrix<double, 1, Eigen::Dynamic>(p));
            vals_r__ = context__.vals_r("xCT_o");
            pos__ = 0;
            size_t xCT_o_j_1_max__ = p;
            size_t xCT_o_k_0_max__ = nCT_o;
            for (size_t j_1__ = 0; j_1__ < xCT_o_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < xCT_o_k_0_max__; ++k_0__) {
                    xCT_o[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 14;
            validate_non_negative_index("xCT_c", "p", p);
            validate_non_negative_index("xCT_c", "nCT_c", nCT_c);
            context__.validate_dims("data initialization", "xCT_c", "row_vector_d", context__.to_vec(nCT_c,p));
            xCT_c = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(nCT_c, Eigen::Matrix<double, 1, Eigen::Dynamic>(p));
            vals_r__ = context__.vals_r("xCT_c");
            pos__ = 0;
            size_t xCT_c_j_1_max__ = p;
            size_t xCT_c_k_0_max__ = nCT_c;
            for (size_t j_1__ = 0; j_1__ < xCT_c_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < xCT_c_k_0_max__; ++k_0__) {
                    xCT_c[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 15;
            validate_non_negative_index("xCC_o", "p", p);
            validate_non_negative_index("xCC_o", "nCC_o", nCC_o);
            context__.validate_dims("data initialization", "xCC_o", "row_vector_d", context__.to_vec(nCC_o,p));
            xCC_o = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(nCC_o, Eigen::Matrix<double, 1, Eigen::Dynamic>(p));
            vals_r__ = context__.vals_r("xCC_o");
            pos__ = 0;
            size_t xCC_o_j_1_max__ = p;
            size_t xCC_o_k_0_max__ = nCC_o;
            for (size_t j_1__ = 0; j_1__ < xCC_o_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < xCC_o_k_0_max__; ++k_0__) {
                    xCC_o[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("xEC_o", "p", p);
            validate_non_negative_index("xEC_o", "nEC_o", nEC_o);
            context__.validate_dims("data initialization", "xEC_o", "row_vector_d", context__.to_vec(nEC_o,p));
            xEC_o = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(nEC_o, Eigen::Matrix<double, 1, Eigen::Dynamic>(p));
            vals_r__ = context__.vals_r("xEC_o");
            pos__ = 0;
            size_t xEC_o_j_1_max__ = p;
            size_t xEC_o_k_0_max__ = nEC_o;
            for (size_t j_1__ = 0; j_1__ < xEC_o_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < xEC_o_k_0_max__; ++k_0__) {
                    xEC_o[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 17;
            validate_non_negative_index("xEC_c", "p", p);
            validate_non_negative_index("xEC_c", "nEC_c", nEC_c);
            context__.validate_dims("data initialization", "xEC_c", "row_vector_d", context__.to_vec(nEC_c,p));
            xEC_c = std::vector<Eigen::Matrix<double, 1, Eigen::Dynamic> >(nEC_c, Eigen::Matrix<double, 1, Eigen::Dynamic>(p));
            vals_r__ = context__.vals_r("xEC_c");
            pos__ = 0;
            size_t xEC_c_j_1_max__ = p;
            size_t xEC_c_k_0_max__ = nEC_c;
            for (size_t j_1__ = 0; j_1__ < xEC_c_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < xEC_c_k_0_max__; ++k_0__) {
                    xEC_c[k_0__](j_1__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 18;
            context__.validate_dims("data initialization", "scale", "double", context__.to_vec());
            scale = double(0);
            vals_r__ = context__.vals_r("scale");
            pos__ = 0;
            scale = vals_r__[pos__++];
            check_greater_or_equal(function__, "scale", scale, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 21;
            num_params_r__ += 1;
            current_statement_begin__ = 22;
            num_params_r__ += 1;
            current_statement_begin__ = 23;
            num_params_r__ += 1;
            current_statement_begin__ = 24;
            num_params_r__ += 1;
            current_statement_begin__ = 25;
            validate_non_negative_index("beta", "p", p);
            num_params_r__ += p;
            current_statement_begin__ = 26;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_T2ENormalC0() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 21;
        if (!(context__.contains_r("theta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta", "double", context__.to_vec());
        double theta(0);
        theta = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 22;
        if (!(context__.contains_r("gammaCC")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gammaCC missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gammaCC");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gammaCC", "double", context__.to_vec());
        double gammaCC(0);
        gammaCC = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(gammaCC);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gammaCC: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 23;
        if (!(context__.contains_r("gammaEC")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable gammaEC missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("gammaEC");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "gammaEC", "double", context__.to_vec());
        double gammaEC(0);
        gammaEC = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(gammaEC);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable gammaEC: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 24;
        if (!(context__.contains_r("tau")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable tau missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("tau");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "tau", "double", context__.to_vec());
        double tau(0);
        tau = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, tau);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable tau: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 25;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "p", p);
        context__.validate_dims("parameter initialization", "beta", "vector_d", context__.to_vec(p));
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 26;
        if (!(context__.contains_r("alpha")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable alpha missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("alpha");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "alpha", "double", context__.to_vec());
        double alpha(0);
        alpha = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, alpha);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable alpha: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 21;
            local_scalar_t__ theta;
            (void) theta;  // dummy to suppress unused var warning
            if (jacobian__)
                theta = in__.scalar_constrain(lp__);
            else
                theta = in__.scalar_constrain();
            current_statement_begin__ = 22;
            local_scalar_t__ gammaCC;
            (void) gammaCC;  // dummy to suppress unused var warning
            if (jacobian__)
                gammaCC = in__.scalar_constrain(lp__);
            else
                gammaCC = in__.scalar_constrain();
            current_statement_begin__ = 23;
            local_scalar_t__ gammaEC;
            (void) gammaEC;  // dummy to suppress unused var warning
            if (jacobian__)
                gammaEC = in__.scalar_constrain(lp__);
            else
                gammaEC = in__.scalar_constrain();
            current_statement_begin__ = 24;
            local_scalar_t__ tau;
            (void) tau;  // dummy to suppress unused var warning
            if (jacobian__)
                tau = in__.scalar_lb_constrain(0, lp__);
            else
                tau = in__.scalar_lb_constrain(0);
            current_statement_begin__ = 25;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.vector_constrain(p, lp__);
            else
                beta = in__.vector_constrain(p);
            current_statement_begin__ = 26;
            local_scalar_t__ alpha;
            (void) alpha;  // dummy to suppress unused var warning
            if (jacobian__)
                alpha = in__.scalar_lb_constrain(0, lp__);
            else
                alpha = in__.scalar_lb_constrain(0);
            // model body
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(tau, 0, scale));
            current_statement_begin__ = 30;
            lp_accum__.add(normal_log<propto__>(gammaCC, gammaEC, tau));
            current_statement_begin__ = 32;
            for (int i = 1; i <= nCT_o; ++i) {
                current_statement_begin__ = 33;
                lp_accum__.add(weibull_log<propto__>(get_base1(yCT_o, i, "yCT_o", 1), alpha, stan::math::exp((-(((gammaCC + theta) + multiply(get_base1(xCT_o, i, "xCT_o", 1), beta))) / alpha))));
            }
            current_statement_begin__ = 34;
            for (int i = 1; i <= nCC_o; ++i) {
                current_statement_begin__ = 35;
                lp_accum__.add(weibull_log<propto__>(get_base1(yCC_o, i, "yCC_o", 1), alpha, stan::math::exp((-((gammaCC + multiply(get_base1(xCC_o, i, "xCC_o", 1), beta))) / alpha))));
            }
            current_statement_begin__ = 36;
            for (int i = 1; i <= nEC_o; ++i) {
                current_statement_begin__ = 37;
                lp_accum__.add(weibull_log<propto__>(get_base1(yEC_o, i, "yEC_o", 1), alpha, stan::math::exp((-((gammaEC + multiply(get_base1(xEC_o, i, "xEC_o", 1), beta))) / alpha))));
            }
            current_statement_begin__ = 39;
            for (int i = 1; i <= nCT_c; ++i) {
                current_statement_begin__ = 40;
                lp_accum__.add(weibull_ccdf_log(get_base1(yCT_c, i, "yCT_c", 1), alpha, stan::math::exp((-(((gammaCC + theta) + multiply(get_base1(xCT_c, i, "xCT_c", 1), beta))) / alpha))));
            }
            current_statement_begin__ = 41;
            for (int i = 1; i <= nEC_c; ++i) {
                current_statement_begin__ = 42;
                lp_accum__.add(weibull_ccdf_log(get_base1(yEC_c, i, "yEC_c", 1), alpha, stan::math::exp((-((gammaEC + multiply(get_base1(xEC_c, i, "xEC_c", 1), beta))) / alpha))));
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta");
        names__.push_back("gammaCC");
        names__.push_back("gammaEC");
        names__.push_back("tau");
        names__.push_back("beta");
        names__.push_back("alpha");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_T2ENormalC0_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double theta = in__.scalar_constrain();
        vars__.push_back(theta);
        double gammaCC = in__.scalar_constrain();
        vars__.push_back(gammaCC);
        double gammaEC = in__.scalar_constrain();
        vars__.push_back(gammaEC);
        double tau = in__.scalar_lb_constrain(0);
        vars__.push_back(tau);
        Eigen::Matrix<double, Eigen::Dynamic, 1> beta = in__.vector_constrain(p);
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double alpha = in__.scalar_lb_constrain(0);
        vars__.push_back(alpha);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            if (!include_gqs__ && !include_tparams__) return;
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_T2ENormalC0";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gammaCC";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gammaEC";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gammaCC";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "gammaEC";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "tau";
        param_names__.push_back(param_name_stream__.str());
        size_t beta_j_1_max__ = p;
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "alpha";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_T2ENormalC0_namespace::model_T2ENormalC0 stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
