// Generated by rstantools.  Do not edit by hand.

/*
    psBayesborrow is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    psBayesborrow is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with psBayesborrow.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_T2ENoborrow_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 43> locations_array__ =
  {" (found before start of program)",
  " (in 'string', line 17, column 2 to column 13)",
  " (in 'string', line 18, column 2 to column 15)",
  " (in 'string', line 19, column 2 to column 17)",
  " (in 'string', line 20, column 2 to column 22)",
  " (in 'string', line 24, column 4 to column 72)",
  " (in 'string', line 23, column 2 to line 24, column 72)",
  " (in 'string', line 26, column 4 to column 72)",
  " (in 'string', line 25, column 2 to line 26, column 72)",
  " (in 'string', line 29, column 6 to column 88)",
  " (in 'string', line 28, column 4 to line 29, column 88)",
  " (in 'string', line 27, column 13 to line 30, column 3)",
  " (in 'string', line 27, column 2 to line 30, column 3)",
  " (in 'string', line 33, column 6 to column 88)",
  " (in 'string', line 32, column 4 to line 33, column 88)",
  " (in 'string', line 31, column 13 to line 34, column 3)",
  " (in 'string', line 31, column 2 to line 34, column 3)",
  " (in 'string', line 2, column 2 to column 21)",
  " (in 'string', line 3, column 2 to column 21)",
  " (in 'string', line 4, column 2 to column 21)",
  " (in 'string', line 5, column 2 to column 21)",
  " (in 'string', line 6, column 2 to column 17)",
  " (in 'string', line 7, column 9 to column 14)",
  " (in 'string', line 7, column 2 to column 22)",
  " (in 'string', line 8, column 9 to column 14)",
  " (in 'string', line 8, column 2 to column 22)",
  " (in 'string', line 9, column 9 to column 14)",
  " (in 'string', line 9, column 2 to column 22)",
  " (in 'string', line 10, column 9 to column 14)",
  " (in 'string', line 10, column 2 to column 22)",
  " (in 'string', line 11, column 22 to column 27)",
  " (in 'string', line 11, column 13 to column 14)",
  " (in 'string', line 11, column 2 to column 29)",
  " (in 'string', line 12, column 22 to column 27)",
  " (in 'string', line 12, column 13 to column 14)",
  " (in 'string', line 12, column 2 to column 29)",
  " (in 'string', line 13, column 22 to column 27)",
  " (in 'string', line 13, column 13 to column 14)",
  " (in 'string', line 13, column 2 to column 29)",
  " (in 'string', line 14, column 22 to column 27)",
  " (in 'string', line 14, column 13 to column 14)",
  " (in 'string', line 14, column 2 to column 29)",
  " (in 'string', line 19, column 9 to column 10)"};
#include <stan_meta_header.hpp>
class model_T2ENoborrow final : public model_base_crtp<model_T2ENoborrow> {
private:
  int nCT_o;
  int nCT_c;
  int nCC_o;
  int nCC_c;
  int p;
  Eigen::Matrix<double,-1,1> yCT_o_data__;
  Eigen::Matrix<double,-1,1> yCT_c_data__;
  Eigen::Matrix<double,-1,1> yCC_o_data__;
  Eigen::Matrix<double,-1,1> yCC_c_data__;
  std::vector<Eigen::Matrix<double,1,-1>> xCT_o;
  std::vector<Eigen::Matrix<double,1,-1>> xCT_c;
  std::vector<Eigen::Matrix<double,1,-1>> xCC_o;
  std::vector<Eigen::Matrix<double,1,-1>> xCC_c;
  Eigen::Map<Eigen::Matrix<double,-1,1>> yCT_o{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> yCT_c{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> yCC_o{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> yCC_c{nullptr, 0};
public:
  ~model_T2ENoborrow() {}
  model_T2ENoborrow(stan::io::var_context& context__, unsigned int
                    random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_T2ENoborrow_namespace::model_T2ENoborrow";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 17;
      context__.validate_dims("data initialization", "nCT_o", "int",
        std::vector<size_t>{});
      nCT_o = std::numeric_limits<int>::min();
      current_statement__ = 17;
      nCT_o = context__.vals_i("nCT_o")[(1 - 1)];
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "nCT_o", nCT_o, 0);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "nCT_c", "int",
        std::vector<size_t>{});
      nCT_c = std::numeric_limits<int>::min();
      current_statement__ = 18;
      nCT_c = context__.vals_i("nCT_c")[(1 - 1)];
      current_statement__ = 18;
      stan::math::check_greater_or_equal(function__, "nCT_c", nCT_c, 0);
      current_statement__ = 19;
      context__.validate_dims("data initialization", "nCC_o", "int",
        std::vector<size_t>{});
      nCC_o = std::numeric_limits<int>::min();
      current_statement__ = 19;
      nCC_o = context__.vals_i("nCC_o")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "nCC_o", nCC_o, 0);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "nCC_c", "int",
        std::vector<size_t>{});
      nCC_c = std::numeric_limits<int>::min();
      current_statement__ = 20;
      nCC_c = context__.vals_i("nCC_c")[(1 - 1)];
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "nCC_c", nCC_c, 0);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "p", "int",
        std::vector<size_t>{});
      p = std::numeric_limits<int>::min();
      current_statement__ = 21;
      p = context__.vals_i("p")[(1 - 1)];
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "p", p, 0);
      current_statement__ = 22;
      stan::math::validate_non_negative_index("yCT_o", "nCT_o", nCT_o);
      current_statement__ = 23;
      context__.validate_dims("data initialization", "yCT_o", "double",
        std::vector<size_t>{static_cast<size_t>(nCT_o)});
      yCT_o_data__ = Eigen::Matrix<double,-1,1>::Constant(nCT_o,
                       std::numeric_limits<double>::quiet_NaN());
      new (&yCT_o)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(yCT_o_data__.data(), nCT_o);
      {
        std::vector<local_scalar_t__> yCT_o_flat__;
        current_statement__ = 23;
        yCT_o_flat__ = context__.vals_r("yCT_o");
        current_statement__ = 23;
        pos__ = 1;
        current_statement__ = 23;
        for (int sym1__ = 1; sym1__ <= nCT_o; ++sym1__) {
          current_statement__ = 23;
          stan::model::assign(yCT_o, yCT_o_flat__[(pos__ - 1)],
            "assigning variable yCT_o", stan::model::index_uni(sym1__));
          current_statement__ = 23;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 24;
      stan::math::validate_non_negative_index("yCT_c", "nCT_c", nCT_c);
      current_statement__ = 25;
      context__.validate_dims("data initialization", "yCT_c", "double",
        std::vector<size_t>{static_cast<size_t>(nCT_c)});
      yCT_c_data__ = Eigen::Matrix<double,-1,1>::Constant(nCT_c,
                       std::numeric_limits<double>::quiet_NaN());
      new (&yCT_c)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(yCT_c_data__.data(), nCT_c);
      {
        std::vector<local_scalar_t__> yCT_c_flat__;
        current_statement__ = 25;
        yCT_c_flat__ = context__.vals_r("yCT_c");
        current_statement__ = 25;
        pos__ = 1;
        current_statement__ = 25;
        for (int sym1__ = 1; sym1__ <= nCT_c; ++sym1__) {
          current_statement__ = 25;
          stan::model::assign(yCT_c, yCT_c_flat__[(pos__ - 1)],
            "assigning variable yCT_c", stan::model::index_uni(sym1__));
          current_statement__ = 25;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 26;
      stan::math::validate_non_negative_index("yCC_o", "nCC_o", nCC_o);
      current_statement__ = 27;
      context__.validate_dims("data initialization", "yCC_o", "double",
        std::vector<size_t>{static_cast<size_t>(nCC_o)});
      yCC_o_data__ = Eigen::Matrix<double,-1,1>::Constant(nCC_o,
                       std::numeric_limits<double>::quiet_NaN());
      new (&yCC_o)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(yCC_o_data__.data(), nCC_o);
      {
        std::vector<local_scalar_t__> yCC_o_flat__;
        current_statement__ = 27;
        yCC_o_flat__ = context__.vals_r("yCC_o");
        current_statement__ = 27;
        pos__ = 1;
        current_statement__ = 27;
        for (int sym1__ = 1; sym1__ <= nCC_o; ++sym1__) {
          current_statement__ = 27;
          stan::model::assign(yCC_o, yCC_o_flat__[(pos__ - 1)],
            "assigning variable yCC_o", stan::model::index_uni(sym1__));
          current_statement__ = 27;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 28;
      stan::math::validate_non_negative_index("yCC_c", "nCC_c", nCC_c);
      current_statement__ = 29;
      context__.validate_dims("data initialization", "yCC_c", "double",
        std::vector<size_t>{static_cast<size_t>(nCC_c)});
      yCC_c_data__ = Eigen::Matrix<double,-1,1>::Constant(nCC_c,
                       std::numeric_limits<double>::quiet_NaN());
      new (&yCC_c)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(yCC_c_data__.data(), nCC_c);
      {
        std::vector<local_scalar_t__> yCC_c_flat__;
        current_statement__ = 29;
        yCC_c_flat__ = context__.vals_r("yCC_c");
        current_statement__ = 29;
        pos__ = 1;
        current_statement__ = 29;
        for (int sym1__ = 1; sym1__ <= nCC_c; ++sym1__) {
          current_statement__ = 29;
          stan::model::assign(yCC_c, yCC_c_flat__[(pos__ - 1)],
            "assigning variable yCC_c", stan::model::index_uni(sym1__));
          current_statement__ = 29;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 30;
      stan::math::validate_non_negative_index("xCT_o", "nCT_o", nCT_o);
      current_statement__ = 31;
      stan::math::validate_non_negative_index("xCT_o", "p", p);
      current_statement__ = 32;
      context__.validate_dims("data initialization", "xCT_o", "double",
        std::vector<size_t>{static_cast<size_t>(nCT_o),
          static_cast<size_t>(p)});
      xCT_o = std::vector<Eigen::Matrix<double,1,-1>>(nCT_o,
                Eigen::Matrix<double,1,-1>::Constant(p,
                  std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> xCT_o_flat__;
        current_statement__ = 32;
        xCT_o_flat__ = context__.vals_r("xCT_o");
        current_statement__ = 32;
        pos__ = 1;
        current_statement__ = 32;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 32;
          for (int sym2__ = 1; sym2__ <= nCT_o; ++sym2__) {
            current_statement__ = 32;
            stan::model::assign(xCT_o, xCT_o_flat__[(pos__ - 1)],
              "assigning variable xCT_o", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 32;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 33;
      stan::math::validate_non_negative_index("xCT_c", "nCT_c", nCT_c);
      current_statement__ = 34;
      stan::math::validate_non_negative_index("xCT_c", "p", p);
      current_statement__ = 35;
      context__.validate_dims("data initialization", "xCT_c", "double",
        std::vector<size_t>{static_cast<size_t>(nCT_c),
          static_cast<size_t>(p)});
      xCT_c = std::vector<Eigen::Matrix<double,1,-1>>(nCT_c,
                Eigen::Matrix<double,1,-1>::Constant(p,
                  std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> xCT_c_flat__;
        current_statement__ = 35;
        xCT_c_flat__ = context__.vals_r("xCT_c");
        current_statement__ = 35;
        pos__ = 1;
        current_statement__ = 35;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 35;
          for (int sym2__ = 1; sym2__ <= nCT_c; ++sym2__) {
            current_statement__ = 35;
            stan::model::assign(xCT_c, xCT_c_flat__[(pos__ - 1)],
              "assigning variable xCT_c", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 35;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 36;
      stan::math::validate_non_negative_index("xCC_o", "nCC_o", nCC_o);
      current_statement__ = 37;
      stan::math::validate_non_negative_index("xCC_o", "p", p);
      current_statement__ = 38;
      context__.validate_dims("data initialization", "xCC_o", "double",
        std::vector<size_t>{static_cast<size_t>(nCC_o),
          static_cast<size_t>(p)});
      xCC_o = std::vector<Eigen::Matrix<double,1,-1>>(nCC_o,
                Eigen::Matrix<double,1,-1>::Constant(p,
                  std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> xCC_o_flat__;
        current_statement__ = 38;
        xCC_o_flat__ = context__.vals_r("xCC_o");
        current_statement__ = 38;
        pos__ = 1;
        current_statement__ = 38;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 38;
          for (int sym2__ = 1; sym2__ <= nCC_o; ++sym2__) {
            current_statement__ = 38;
            stan::model::assign(xCC_o, xCC_o_flat__[(pos__ - 1)],
              "assigning variable xCC_o", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 38;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 39;
      stan::math::validate_non_negative_index("xCC_c", "nCC_c", nCC_c);
      current_statement__ = 40;
      stan::math::validate_non_negative_index("xCC_c", "p", p);
      current_statement__ = 41;
      context__.validate_dims("data initialization", "xCC_c", "double",
        std::vector<size_t>{static_cast<size_t>(nCC_c),
          static_cast<size_t>(p)});
      xCC_c = std::vector<Eigen::Matrix<double,1,-1>>(nCC_c,
                Eigen::Matrix<double,1,-1>::Constant(p,
                  std::numeric_limits<double>::quiet_NaN()));
      {
        std::vector<local_scalar_t__> xCC_c_flat__;
        current_statement__ = 41;
        xCC_c_flat__ = context__.vals_r("xCC_c");
        current_statement__ = 41;
        pos__ = 1;
        current_statement__ = 41;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 41;
          for (int sym2__ = 1; sym2__ <= nCC_c; ++sym2__) {
            current_statement__ = 41;
            stan::model::assign(xCC_c, xCC_c_flat__[(pos__ - 1)],
              "assigning variable xCC_c", stan::model::index_uni(sym2__),
              stan::model::index_uni(sym1__));
            current_statement__ = 41;
            pos__ = (pos__ + 1);
          }
        }
      }
      current_statement__ = 42;
      stan::math::validate_non_negative_index("beta", "p", p);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + p + 1;
  }
  inline std::string model_name() const final {
    return "model_T2ENoborrow";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_T2ENoborrow_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = in__.template read<local_scalar_t__>();
      local_scalar_t__ gammaCC = DUMMY_VAR__;
      current_statement__ = 2;
      gammaCC = in__.template read<local_scalar_t__>();
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 4;
      alpha = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      {
        current_statement__ = 6;
        for (int i = 1; i <= nCT_o; ++i) {
          current_statement__ = 5;
          lp_accum__.add(stan::math::weibull_lpdf<propto__>(
                           stan::model::rvalue(yCT_o, "yCT_o",
                             stan::model::index_uni(i)), alpha,
                           stan::math::exp((-((gammaCC + theta) +
                             stan::math::multiply(
                               stan::model::rvalue(xCT_o, "xCT_o",
                                 stan::model::index_uni(i)), beta)) / alpha))));
        }
        current_statement__ = 8;
        for (int i = 1; i <= nCC_o; ++i) {
          current_statement__ = 7;
          lp_accum__.add(stan::math::weibull_lpdf<propto__>(
                           stan::model::rvalue(yCC_o, "yCC_o",
                             stan::model::index_uni(i)), alpha,
                           stan::math::exp((-(gammaCC +
                             stan::math::multiply(
                               stan::model::rvalue(xCC_o, "xCC_o",
                                 stan::model::index_uni(i)), beta)) / alpha))));
        }
        current_statement__ = 12;
        if (stan::math::logical_gt(nCT_c, 0)) {
          current_statement__ = 10;
          for (int i = 1; i <= nCT_c; ++i) {
            current_statement__ = 9;
            lp_accum__.add(stan::math::weibull_lccdf(
                             stan::model::rvalue(yCT_c, "yCT_c",
                               stan::model::index_uni(i)), alpha,
                             stan::math::exp((-((gammaCC + theta) +
                               stan::math::multiply(
                                 stan::model::rvalue(xCT_c, "xCT_c",
                                   stan::model::index_uni(i)), beta)) /
                               alpha))));
          }
        }
        current_statement__ = 16;
        if (stan::math::logical_gt(nCC_c, 0)) {
          current_statement__ = 14;
          for (int i = 1; i <= nCC_c; ++i) {
            current_statement__ = 13;
            lp_accum__.add(stan::math::weibull_lccdf(
                             stan::model::rvalue(yCC_c, "yCC_c",
                               stan::model::index_uni(i)), alpha,
                             stan::math::exp((-(gammaCC +
                               stan::math::multiply(
                                 stan::model::rvalue(xCC_c, "xCC_c",
                                   stan::model::index_uni(i)), beta)) /
                               alpha))));
          }
        }
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_T2ENoborrow_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      theta = in__.template read<local_scalar_t__>();
      double gammaCC = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      gammaCC = in__.template read<local_scalar_t__>();
      Eigen::Matrix<double,-1,1> beta =
        Eigen::Matrix<double,-1,1>::Constant(p,
          std::numeric_limits<double>::quiet_NaN());
      current_statement__ = 3;
      beta = in__.template read<Eigen::Matrix<local_scalar_t__,-1,1>>(p);
      double alpha = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 4;
      alpha = in__.template read_constrain_lb<local_scalar_t__,
                jacobian__>(0, lp__);
      out__.write(theta);
      out__.write(gammaCC);
      out__.write(beta);
      out__.write(alpha);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = in__.read<local_scalar_t__>();
      out__.write(theta);
      local_scalar_t__ gammaCC = DUMMY_VAR__;
      current_statement__ = 2;
      gammaCC = in__.read<local_scalar_t__>();
      out__.write(gammaCC);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      current_statement__ = 3;
      stan::model::assign(beta,
        in__.read<Eigen::Matrix<local_scalar_t__,-1,1>>(p),
        "assigning variable beta");
      out__.write(beta);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 4;
      alpha = in__.read<local_scalar_t__>();
      out__.write_free_lb(0, alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "gammaCC",
        "double", std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "beta", "double",
        std::vector<size_t>{static_cast<size_t>(p)});
      current_statement__ = 4;
      context__.validate_dims("parameter initialization", "alpha", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = context__.vals_r("theta")[(1 - 1)];
      out__.write(theta);
      local_scalar_t__ gammaCC = DUMMY_VAR__;
      current_statement__ = 2;
      gammaCC = context__.vals_r("gammaCC")[(1 - 1)];
      out__.write(gammaCC);
      Eigen::Matrix<local_scalar_t__,-1,1> beta =
        Eigen::Matrix<local_scalar_t__,-1,1>::Constant(p, DUMMY_VAR__);
      {
        std::vector<local_scalar_t__> beta_flat__;
        current_statement__ = 3;
        beta_flat__ = context__.vals_r("beta");
        current_statement__ = 3;
        pos__ = 1;
        current_statement__ = 3;
        for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
          current_statement__ = 3;
          stan::model::assign(beta, beta_flat__[(pos__ - 1)],
            "assigning variable beta", stan::model::index_uni(sym1__));
          current_statement__ = 3;
          pos__ = (pos__ + 1);
        }
      }
      out__.write(beta);
      local_scalar_t__ alpha = DUMMY_VAR__;
      current_statement__ = 4;
      alpha = context__.vals_r("alpha")[(1 - 1)];
      out__.write_free_lb(0, alpha);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"theta", "gammaCC", "beta", "alpha"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{},
                std::vector<size_t>{static_cast<size_t>(p)},
                std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "gammaCC");
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "gammaCC");
    for (int sym1__ = 1; sym1__ <= p; ++sym1__) {
      param_names__.emplace_back(std::string() + "beta" + '.' +
        std::to_string(sym1__));
    }
    param_names__.emplace_back(std::string() + "alpha");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gammaCC\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"gammaCC\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"beta\",\"type\":{\"name\":\"vector\",\"length\":" + std::to_string(p) + "},\"block\":\"parameters\"},{\"name\":\"alpha\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + p) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = (((1 + 1) + p) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_T2ENoborrow_namespace::model_T2ENoborrow;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_T2ENoborrow_namespace::profiles__;
}
#endif
#endif
