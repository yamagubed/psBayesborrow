n.C   <- length(invet.ps)
wk.n1 <- floor(n.C/n.EC)
wk.n2 <- n.C-wk.n1*n.EC
wk.n3 <- sample(n.EC,wk.n2)
wk.n4 <- data.frame(X1=1:n.EC,X2=wk.n1)
wk.n4[wk.n3,"X2"] <- wk.n1+1
wk.n5 <- wk.n4 %>% mutate(en=cumsum(X2))
wk.n6 <- data.frame(wk.n5,st=c(1,wk.n5$en[-n.EC]+1))
wk.ps1 <- sort(invet.ps)
wk.ps2 <- apply(as.matrix(1:n.EC),1,function(x){median(wk.ps1[wk.n6$st[x]:wk.n6$en[x]])})
return(wk.ps2)
}
ncov     <- length(cov.lab)
data.cov <- data.frame(data[,c("study","treat",cov.lab)],
conc.contl=0,conc.treat=0,conc.all=0,treat2contl=0)
CT.flg <- (data.cov$study==1)&(data.cov$treat==1)
CC.flg <- (data.cov$study==1)&(data.cov$treat==0)
data.cov[CT.flg,"conc.contl"]  <- 99
data.cov[CT.flg,"conc.treat"]  <- 1
data.cov[CT.flg,"conc.all"]    <- 1
data.cov[CT.flg,"treat2contl"] <- 1
data.cov[CC.flg,"conc.contl"]  <- 1
data.cov[CC.flg,"conc.treat"]  <- 99
data.cov[CC.flg,"conc.all"]    <- 1
data.cov[CC.flg,"treat2contl"] <- 0
fit.ps <- MatchIt::matchit(study~.,
data     = data.cov[,c("study",cov.lab)],
method   = NULL,
distance = method.psest,
link     = method.pslink)
data.cov.ps <- data.frame(data.cov,ps=as.vector(fit.ps$distance))
match.pts  <- (data.cov.ps[,method.whomatch]!=99)
data.match <- data.cov.ps[match.pts,c(method.whomatch,cov.lab)]
colnames(data.match) <- c("match",cov.lab)
if(method.whomatch=="conc.contl"){
n.CC  <- sum(CC.flg)
ratio <- n.EC/n.CC
if(method.matching=="optimal"){
fit.match <- MatchIt::matchit(match~.,
data     = data.match,
method   = method.matching,
distance = data.cov.ps[match.pts,"ps"],
ratio    = ratio)
subjid.EC <- as.numeric(fit.match$match.matrix)
}else if(method.matching=="nearest"){
fit.match <- MatchIt::matchit(match~.,
data     = data.match,
method   = method.matching,
distance = data.cov.ps[match.pts,"ps"],
m.order  = method.psorder,
ratio    = ratio)
subjid.EC <- as.numeric(fit.match$match.matrix)
}
}else if((method.whomatch=="conc.treat")|(method.whomatch=="conc.all")){
if(method.matching=="optimal"){
fit.match <- MatchIt::matchit(match~.,
data     = data.match,
method   = method.matching,
distance = data.cov.ps[match.pts,"ps"])
subjid.EC <- sample(as.numeric(fit.match$match.matrix),n.EC)
}else if(method.matching=="nearest"){
ps.M1 <- data.cov.ps[data.cov.ps[,method.whomatch]==1,"ps"]
ps.M0 <- data.cov.ps[data.cov.ps[,method.whomatch]==0,"ps"]
ps.M  <- sort(abs(apply(as.matrix(ps.M1),1,function(x){x-ps.M0})))
ncal <- n.EC
while(1){
fit.match <- MatchIt::matchit(match~.,
data        = data.match,
method      = method.matching,
distance    = data.cov.ps[match.pts,"ps"],
m.order     = method.psorder,
caliper     = ps.M[ncal],
std.caliper = FALSE)
if(sum(!is.na(fit.match$match.matrix))>=n.EC){
nearest <- fit.match$match.matrix
break
}else{
ncal <- ncal+1
}
}
subjid.EC <- sample(as.numeric(nearest[!is.na(nearest),]),n.EC)
}else if((method.matching=="boot.random.optimal")|(method.matching=="boot.random.nearest")|
(method.matching=="boot.highprob.optimal")|(method.matching=="boot.highprob.nearest")){
pre.new.ps <- data.match[data.match$match==1,"ps"]
boot       <- replicate(B,sample(pre.new.ps,n.EC))
if((method.matching=="boot.random.optimal")|(method.matching=="boot.highprob.optimal")){
bs.match <- apply(boot,2,function(x){return(bootmatch.optimal(nwps=x,dmat=data.match))})
}else if((method.matching=="boot.random.nearest")|(method.matching=="boot.highprob.nearest")){
bs.match <- apply(boot,2,function(x){return(bootmatch.nearest(nwps=x,dmat=data.match,method.psorder=method.psorder))})
}
ECp.lab  <- as.numeric(rownames(data.match[data.match$match==0,]))
bc.prob  <- apply(as.matrix(ECp.lab),1,function(x){return(mean(bs.match==x))})
if((method.matching=="boot.random.optimal")|(method.matching=="boot.random.nearest")){
subjid.EC <- sample(ECp.lab,n.EC,prob=bc.prob)
}else if((method.matching=="boot.highprob.optimal")|(method.matching=="boot.highprob.nearest")){
subjid.EC <- ECp.lab[order(bc.prob,decreasing=TRUE)[1:n.EC]]
}
}else if((method.matching=="med.optimal")|(method.matching=="med.nearest")|
(method.matching=="km.optimal")|(method.matching=="km.nearest")|
(method.matching=="cm.optimal")|(method.matching=="cm.nearest")){
pre.new.ps <- data.match[data.match$match==1,"ps"]
if((method.matching=="med.optimal")|(method.matching=="med.nearest")){
new.ps <- medps(invet.ps=pre.new.ps,n.EC=n.EC)
}else if((method.matching=="km.optimal")|(method.matching=="km.nearest")){
new.ps <- as.vector(kmeans(pre.new.ps,n.EC)$centers)
}else if((method.matching=="cm.optimal")|(method.matching=="cm.nearest")){
new.ps <- as.vector(cmeans(pre.new.ps,n.EC)$centers)
}
new.data.match <- rbind(data.frame(study=1,ps=new.ps,match=1),data.match[data.match$match==0,])
if((method.matching=="med.optimal")|(method.matching=="km.optimal")|(method.matching=="cm.optimal")){
fit.match <- MatchIt::matchit(match~.,
data     = new.data.match,
method   = "optimal",
distance = new.data.match[,"ps"])
}else if((method.matching=="med.nearest")|(method.matching=="km.nearest")|(method.matching=="cm.nearest")){
fit.match <- MatchIt::matchit(match~.,
data     = new.data.match,
method   = "nearest",
distance = new.data.match[,"ps"],
m.order  = method.psorder)
}
subjid.EC <- as.numeric(fit.match$match.matrix)
}
}else if(method.whomatch=="treat2contl"){
if(method.matching=="optimal"){
fit.match <- MatchIt::matchit(match~.,
data     = data.match,
method   = method.matching,
distance = data.cov.ps[match.pts,"ps"])
subjid.C1 <- as.numeric(fit.match$match.matrix)
subjid.C2 <- subjid.C1[data.cov.ps[subjid.C1,"study"]==0]
if(length(subjid.C2)>=n.EC){
subjid.EC <- sample(subjid.C2,n.EC)
}else{
subjid.EC <- subjid.C2
}
}else if(method.matching=="nearest"){
ps.M1 <- data.cov.ps[data.cov.ps[,method.whomatch]==1,"ps"]
ps.M0 <- data.cov.ps[data.cov.ps[,method.whomatch]==0,"ps"]
ps.M  <- sort(abs(apply(as.matrix(ps.M1),1,function(x){x-ps.M0})))
ncal <- n.EC
while(1){
fit.match <- MatchIt::matchit(match~.,
data        = data.match,
method      = method.matching,
distance    = data.cov.ps[match.pts,"ps"],
m.order     = method.psorder,
caliper     = ps.M[ncal],
std.caliper = FALSE)
subjid.C1 <- fit.match$match.matrix
subjid.C2 <- as.numeric(subjid.C1[!is.na(subjid.C1)])
subjid.C3 <- subjid.C2[data.cov.ps[subjid.C2,"study"]==0]
if(length(subjid.C3)>=n.EC){
nearest <- subjid.C3
break
}else{
ncal <- ncal+1
}
}
subjid.EC <- sample(nearest,n.EC)
}
}
return(list(subjid.EC=subjid.EC,data.ps=data.cov.ps[,c("study","treat",cov.lab,"ps")]))
}
}
out.psmatch <- psmatch(
study~X1+X2, data=indata$data, n.EC=n.EC,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
out.psmatch
indata
trial.simulation.t2e <- function(
n.CT, n.CC, nevent.C, n.ECp, nevent.ECp, accrual,
out.mevent.CT, out.mevent.CC, driftHR,
cov.C, cov.cor.C, cov.effect.C,
cov.EC, cov.cor.EC, cov.effect.EC)
{
ncov          <- length(cov.C)
out.lambda.CT <- log(2)/out.mevent.CT
out.lambda.CC <- log(2)/out.mevent.CC
out.lambda.EC <- out.lambda.CC*driftHR
lcov.effect.C  <- (-log(cov.effect.C))
lcov.effect.EC <- (-log(cov.effect.EC))
marg.C  <- NULL
marg.EC <- NULL
mean.C  <- NULL
mean.EC <- NULL
for(i in 1:ncov){
if(cov.C[[i]]$dist=="norm"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(mean=cov.C[[i]]$mean, sd=cov.C[[i]]$sd))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(mean=cov.EC[[i]]$mean,sd=cov.EC[[i]]$sd))))
mean.C  <- c(mean.C, cov.C[[i]]$mean)
mean.EC <- c(mean.EC,cov.EC[[i]]$mean)
}else if(cov.C[[i]]$dist=="binom"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(size=1,prob=cov.C[[i]]$prob))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(size=1,prob=cov.EC[[i]]$prob))))
mean.C  <- c(mean.C, cov.C[[i]]$prob)
mean.EC <- c(mean.EC,cov.EC[[i]]$prob)
}
}
int.C   <- log(1/out.lambda.CC)-sum(mean.C*lcov.effect.C)
int.EC  <- log(1/out.lambda.EC)-sum(mean.EC*lcov.effect.EC)
t.theta <- log(out.lambda.CC/out.lambda.CT)
cvec.C  <- cov.cor.C[lower.tri(cov.cor.C)]
cvec.EC <- cov.cor.EC[lower.tri(cov.cor.EC)]
data.cov.CT  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CT)
data.cov.CC  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CC)
data.cov.ECp <- datagen(margdist=marg.EC,corvec=cvec.EC,nsim=n.ECp)
sigma.CT  <- exp(int.C +t.theta+apply(data.cov.CT, 1,function(x){sum(x*lcov.effect.C)}))
sigma.CC  <- exp(int.C         +apply(data.cov.CC, 1,function(x){sum(x*lcov.effect.C)}))
sigma.ECp <- exp(int.EC        +apply(data.cov.ECp,1,function(x){sum(x*lcov.effect.EC)}))
data.CT  <- cbind(rweibull(n.CT, shape=1,scale=sigma.CT), data.cov.CT)
data.CC  <- cbind(rweibull(n.CC, shape=1,scale=sigma.CC), data.cov.CC)
data.ECp <- cbind(rweibull(n.ECp,shape=1,scale=sigma.ECp),data.cov.ECp)
enroll.period.C <- floor((n.CT+n.CC)/accrual)
mn.CT <- floor(n.CT/enroll.period.C)
mn.CC <- floor(n.CC/enroll.period.C)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
e.st <- i-1
e.en <- i
enroll.time.CT <- c(enroll.time.CT,runif(mn.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(mn.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.period.C,enroll.period.C+1))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.period.C,enroll.period.C+1))
enroll.period.ECp <- floor(n.ECp/accrual)
enroll.time.ECp <- NULL
for(i in 1:enroll.period.ECp){
e.st <- i-1
e.en <- i
enroll.time.ECp <- c(enroll.time.ECp,runif(accrual,e.st,e.en))
}
enroll.time.ECp <- c(enroll.time.ECp,runif(n.ECp-length(enroll.time.ECp),enroll.period.ECp,enroll.period.ECp+1))
obs.time.CT  <- data.CT[,1] +enroll.time.CT
obs.time.CC  <- data.CC[,1] +enroll.time.CC
obs.time.ECp <- data.ECp[,1]+enroll.time.ECp
last.sub.C   <- sort(c(obs.time.CT,obs.time.CC))[nevent.C]
last.sub.ECp <- sort(obs.time.ECp)[nevent.ECp]
censor.CT  <- as.numeric(obs.time.CT>last.sub.C)
censor.CC  <- as.numeric(obs.time.CC>last.sub.C)
censor.ECp <- as.numeric(obs.time.ECp>last.sub.ECp)
cenf <- (obs.time.CT>last.sub.C)
data.CT[cenf,1] <- data.CT[cenf,1]-(obs.time.CT[cenf]-last.sub.C)
cenf <- (obs.time.CC>last.sub.C)
data.CC[cenf,1] <- data.CC[cenf,1]-(obs.time.CC[cenf]-last.sub.C)
cenf <- (obs.time.ECp>last.sub.ECp)
data.ECp[cenf,1] <- data.ECp[cenf,1]-(obs.time.ECp[cenf]-last.sub.ECp)
censor.CT <- censor.CT[data.CT[,1]>0]
data.CT   <- data.CT[data.CT[,1]>0,]
censor.CC <- censor.CC[data.CC[,1]>0]
data.CC   <- data.CC[data.CC[,1]>0,]
censor.ECp <- censor.ECp[data.ECp[,1]>0]
data.ECp   <- data.ECp[data.ECp[,1]>0,]
outdata <- rbind(
data.frame(study=1,treat=1,y=data.CT[,1], censor=censor.CT, data.CT[,-1]),
data.frame(study=1,treat=0,y=data.CC[,1], censor=censor.CC, data.CC[,-1]),
data.frame(study=0,treat=0,y=data.ECp[,1],censor=censor.ECp,data.ECp[,-1]))
return(outdata)
}
out.psmatch <- psmatch(
study~X1+X2, data=indata$data, n.EC=n.EC,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
indata <- trial.simulation.t2e(
n.CT=n.CT, n.CC=n.CC, nevent.C=nevent.C,
n.ECp=n.ECp, nevent.ECp=nevent.ECp, accrual=accrual,
out.mevent.CT, out.mevent.CC, driftHR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC)
indata
trial.simulation.t2e <- function(
n.CT, n.CC, nevent.C, n.ECp, nevent.ECp, accrual,
out.mevent.CT, out.mevent.CC, driftHR,
cov.C, cov.cor.C, cov.effect.C,
cov.EC, cov.cor.EC, cov.effect.EC)
{
ncov          <- length(cov.C)
out.lambda.CT <- log(2)/out.mevent.CT
out.lambda.CC <- log(2)/out.mevent.CC
out.lambda.EC <- out.lambda.CC*driftHR
lcov.effect.C  <- (-log(cov.effect.C))
lcov.effect.EC <- (-log(cov.effect.EC))
marg.C  <- NULL
marg.EC <- NULL
mean.C  <- NULL
mean.EC <- NULL
for(i in 1:ncov){
if(cov.C[[i]]$dist=="norm"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(mean=cov.C[[i]]$mean, sd=cov.C[[i]]$sd))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(mean=cov.EC[[i]]$mean,sd=cov.EC[[i]]$sd))))
mean.C  <- c(mean.C, cov.C[[i]]$mean)
mean.EC <- c(mean.EC,cov.EC[[i]]$mean)
}else if(cov.C[[i]]$dist=="binom"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(size=1,prob=cov.C[[i]]$prob))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(size=1,prob=cov.EC[[i]]$prob))))
mean.C  <- c(mean.C, cov.C[[i]]$prob)
mean.EC <- c(mean.EC,cov.EC[[i]]$prob)
}
}
int.C   <- log(1/out.lambda.CC)-sum(mean.C*lcov.effect.C)
int.EC  <- log(1/out.lambda.EC)-sum(mean.EC*lcov.effect.EC)
t.theta <- log(out.lambda.CC/out.lambda.CT)
cvec.C  <- cov.cor.C[lower.tri(cov.cor.C)]
cvec.EC <- cov.cor.EC[lower.tri(cov.cor.EC)]
data.cov.CT  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CT)
data.cov.CC  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CC)
data.cov.ECp <- datagen(margdist=marg.EC,corvec=cvec.EC,nsim=n.ECp)
sigma.CT  <- exp(int.C +t.theta+apply(data.cov.CT, 1,function(x){sum(x*lcov.effect.C)}))
sigma.CC  <- exp(int.C         +apply(data.cov.CC, 1,function(x){sum(x*lcov.effect.C)}))
sigma.ECp <- exp(int.EC        +apply(data.cov.ECp,1,function(x){sum(x*lcov.effect.EC)}))
data.CT  <- cbind(rweibull(n.CT, shape=1,scale=sigma.CT), data.cov.CT)
data.CC  <- cbind(rweibull(n.CC, shape=1,scale=sigma.CC), data.cov.CC)
data.ECp <- cbind(rweibull(n.ECp,shape=1,scale=sigma.ECp),data.cov.ECp)
enroll.period.C <- floor((n.CT+n.CC)/accrual)
mn.CT <- floor(n.CT/enroll.period.C)
mn.CC <- floor(n.CC/enroll.period.C)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
e.st <- i-1
e.en <- i
enroll.time.CT <- c(enroll.time.CT,runif(mn.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(mn.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.period.C,enroll.period.C+1))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.period.C,enroll.period.C+1))
enroll.period.ECp <- floor(n.ECp/accrual)
enroll.time.ECp <- NULL
for(i in 1:enroll.period.ECp){
e.st <- i-1
e.en <- i
enroll.time.ECp <- c(enroll.time.ECp,runif(accrual,e.st,e.en))
}
enroll.time.ECp <- c(enroll.time.ECp,runif(n.ECp-length(enroll.time.ECp),enroll.period.ECp,enroll.period.ECp+1))
obs.time.CT  <- data.CT[,1] +enroll.time.CT
obs.time.CC  <- data.CC[,1] +enroll.time.CC
obs.time.ECp <- data.ECp[,1]+enroll.time.ECp
last.sub.C   <- sort(c(obs.time.CT,obs.time.CC))[nevent.C]
last.sub.ECp <- sort(obs.time.ECp)[nevent.ECp]
censor.CT  <- as.numeric(obs.time.CT>last.sub.C)
censor.CC  <- as.numeric(obs.time.CC>last.sub.C)
censor.ECp <- as.numeric(obs.time.ECp>last.sub.ECp)
cenf <- (obs.time.CT>last.sub.C)
data.CT[cenf,1] <- data.CT[cenf,1]-(obs.time.CT[cenf]-last.sub.C)
cenf <- (obs.time.CC>last.sub.C)
data.CC[cenf,1] <- data.CC[cenf,1]-(obs.time.CC[cenf]-last.sub.C)
cenf <- (obs.time.ECp>last.sub.ECp)
data.ECp[cenf,1] <- data.ECp[cenf,1]-(obs.time.ECp[cenf]-last.sub.ECp)
censor.CT <- censor.CT[data.CT[,1]>0]
data.CT   <- data.CT[data.CT[,1]>0,]
censor.CC <- censor.CC[data.CC[,1]>0]
data.CC   <- data.CC[data.CC[,1]>0,]
censor.ECp <- censor.ECp[data.ECp[,1]>0]
data.ECp   <- data.ECp[data.ECp[,1]>0,]
outdata <- rbind(
data.frame(study=1,treat=1,time=data.CT[,1], status=1-censor.CT, data.CT[,-1]),
data.frame(study=1,treat=0,time=data.CC[,1], status=1-censor.CC, data.CC[,-1]),
data.frame(study=0,treat=0,time=data.ECp[,1],status=1-censor.ECp,data.ECp[,-1]))
return(outdata)
}
indata <- trial.simulation.t2e(
n.CT=n.CT, n.CC=n.CC, nevent.C=nevent.C,
n.ECp=n.ECp, nevent.ECp=nevent.ECp, accrual=accrual,
out.mevent.CT, out.mevent.CC, driftHR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC)
indata
n.EC <- 50
method.whomatch <- "conc.treat"
method.matching <- "optimal"
method.psorder  <- NULL
out.psmatch <- psmatch(
study~X1+X2, data=indata, n.EC=n.EC,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
out.psmatch
out.psmatch
indata
indata[subjid.EC,]
indata[out.psmatch$subjid.EC,]
(indata$study=1)|(out.psmatch$subjid.EC)
rbind(indata[indata$study=1,],indata[out.psmatch$subjid.EC,])
rbind(indata[indata$study==1,],indata[out.psmatch$subjid.EC,])
nrow(rbind(indata[indata$study==1,],indata[out.psmatch$subjid.EC,]))
indata[indata$study==1,]
indata$study
sum(indata$study)
trial.simulation.t2e <- function(
n.CT, n.CC, nevent.C, n.ECp, nevent.ECp, accrual,
out.mevent.CT, out.mevent.CC, driftHR,
cov.C, cov.cor.C, cov.effect.C,
cov.EC, cov.cor.EC, cov.effect.EC)
{
ncov          <- length(cov.C)
out.lambda.CT <- log(2)/out.mevent.CT
out.lambda.CC <- log(2)/out.mevent.CC
out.lambda.EC <- out.lambda.CC*driftHR
lcov.effect.C  <- (-log(cov.effect.C))
lcov.effect.EC <- (-log(cov.effect.EC))
marg.C  <- NULL
marg.EC <- NULL
mean.C  <- NULL
mean.EC <- NULL
for(i in 1:ncov){
if(cov.C[[i]]$dist=="norm"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(mean=cov.C[[i]]$mean, sd=cov.C[[i]]$sd))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(mean=cov.EC[[i]]$mean,sd=cov.EC[[i]]$sd))))
mean.C  <- c(mean.C, cov.C[[i]]$mean)
mean.EC <- c(mean.EC,cov.EC[[i]]$mean)
}else if(cov.C[[i]]$dist=="binom"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(size=1,prob=cov.C[[i]]$prob))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(size=1,prob=cov.EC[[i]]$prob))))
mean.C  <- c(mean.C, cov.C[[i]]$prob)
mean.EC <- c(mean.EC,cov.EC[[i]]$prob)
}
}
int.C   <- log(1/out.lambda.CC)-sum(mean.C*lcov.effect.C)
int.EC  <- log(1/out.lambda.EC)-sum(mean.EC*lcov.effect.EC)
t.theta <- log(out.lambda.CC/out.lambda.CT)
cvec.C  <- cov.cor.C[lower.tri(cov.cor.C)]
cvec.EC <- cov.cor.EC[lower.tri(cov.cor.EC)]
data.cov.CT  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CT)
data.cov.CC  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CC)
data.cov.ECp <- datagen(margdist=marg.EC,corvec=cvec.EC,nsim=n.ECp)
sigma.CT  <- exp(int.C +t.theta+apply(data.cov.CT, 1,function(x){sum(x*lcov.effect.C)}))
sigma.CC  <- exp(int.C         +apply(data.cov.CC, 1,function(x){sum(x*lcov.effect.C)}))
sigma.ECp <- exp(int.EC        +apply(data.cov.ECp,1,function(x){sum(x*lcov.effect.EC)}))
data.CT  <- cbind(rweibull(n.CT, shape=1,scale=sigma.CT), data.cov.CT)
data.CC  <- cbind(rweibull(n.CC, shape=1,scale=sigma.CC), data.cov.CC)
data.ECp <- cbind(rweibull(n.ECp,shape=1,scale=sigma.ECp),data.cov.ECp)
enroll.period.C <- floor((n.CT+n.CC)/accrual)
mn.CT <- floor(n.CT/enroll.period.C)
mn.CC <- floor(n.CC/enroll.period.C)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
e.st <- i-1
e.en <- i
enroll.time.CT <- c(enroll.time.CT,runif(mn.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(mn.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.period.C,enroll.period.C+1))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.period.C,enroll.period.C+1))
enroll.period.ECp <- floor(n.ECp/accrual)
enroll.time.ECp <- NULL
for(i in 1:enroll.period.ECp){
e.st <- i-1
e.en <- i
enroll.time.ECp <- c(enroll.time.ECp,runif(accrual,e.st,e.en))
}
enroll.time.ECp <- c(enroll.time.ECp,runif(n.ECp-length(enroll.time.ECp),enroll.period.ECp,enroll.period.ECp+1))
obs.time.CT  <- data.CT[,1] +enroll.time.CT
obs.time.CC  <- data.CC[,1] +enroll.time.CC
obs.time.ECp <- data.ECp[,1]+enroll.time.ECp
last.sub.C   <- sort(c(obs.time.CT,obs.time.CC))[nevent.C]
last.sub.ECp <- sort(obs.time.ECp)[nevent.ECp]
censor.CT  <- as.numeric(obs.time.CT>last.sub.C)
censor.CC  <- as.numeric(obs.time.CC>last.sub.C)
censor.ECp <- as.numeric(obs.time.ECp>last.sub.ECp)
cenf <- (obs.time.CT>last.sub.C)
data.CT[cenf,1] <- data.CT[cenf,1]-(obs.time.CT[cenf]-last.sub.C)
cenf <- (obs.time.CC>last.sub.C)
data.CC[cenf,1] <- data.CC[cenf,1]-(obs.time.CC[cenf]-last.sub.C)
cenf <- (obs.time.ECp>last.sub.ECp)
data.ECp[cenf,1] <- data.ECp[cenf,1]-(obs.time.ECp[cenf]-last.sub.ECp)
censor.CT <- censor.CT[data.CT[,1]>0]
data.CT   <- data.CT[data.CT[,1]>0,]
censor.CC <- censor.CC[data.CC[,1]>0]
data.CC   <- data.CC[data.CC[,1]>0,]
censor.ECp <- censor.ECp[data.ECp[,1]>0]
data.ECp   <- data.ECp[data.ECp[,1]>0,]
outdata <- rbind(
data.frame(study=1,treat=1,time=data.CT[,1], status=1-censor.CT, data.CT[,-1]),
data.frame(study=1,treat=0,time=data.CC[,1], status=1-censor.CC, data.CC[,-1]),
data.frame(study=0,treat=0,time=data.ECp[,1],status=1-censor.ECp,data.ECp[,-1]))
return(outdata)
}
indata <- trial.simulation.t2e(
n.CT=n.CT, n.CC=n.CC, nevent.C=nevent.C,
n.ECp=n.ECp, nevent.ECp=nevent.ECp, accrual=accrual,
out.mevent.CT, out.mevent.CC, driftHR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC)
sum(indata$study)
n.EC <- 50
method.whomatch <- "conc.treat"
method.matching <- "optimal"
method.psorder  <- NULL
out.psmatch <- psmatch(
study~X1+X2, data=indata, n.EC=n.EC,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
nrow(rbind(indata[indata$study==1,],indata[out.psmatch$subjid.EC,]))
rbind(indata[indata$study==1,],indata[out.psmatch$subjid.EC,])
indata.match <- rbind(indata[indata$study==1,],indata[out.psmatch$subjid.EC,])
indata.match
method.borrow <- list(list(prior="noborrow"),
list(prior="normal",scale=0.5))
Surv(time,status)
indata.match
commensurate.t2e(
Surv(time,status)~X1+X2, data=indata.match, method.borrow=method.borrow)
overlapping
overlap
library(survival)
commensurate.t2e(
Surv(time,status)~X1+X2, data=indata.match, method.borrow=method.borrow)
aa<-commensurate.t2e(
Surv(time,status)~X1+X2, data=indata.match, method.borrow=method.borrow)
aa
