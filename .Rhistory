cov.EC <- list(list(dist="norm",mean=0,sd=1),
list(dist="binom",prob=0.4))
cov.cor.EC <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.EC <- c(0.1,0.1)
method.whomatch <- "conc.treat"
method.matching <- "optimal"
method.psorder  <- NULL
method.borrow <- list(list(prior="noborrow"),
list(prior="normal",scale=0.5))
nsim <- 100
n.CT=n.CT
n.CC=n.CC
nevent.C=nevent.C
n.ECp=n.ECp
nevent.Ep=nevent.Ep
n.CT=n.CT
n.CC=n.CC
nevent.C=nevent.C
n.ECp=n.ECp
nevent.ECp=nevent.ECp
n.EC=n.EC
accrual=accrual
out.mevent.CT=out.mevent.CT
out.mevent.CC=out.mevent.CC
driftHR=driftHR
cov.C=cov.C
cov.cor.C=cov.cor.C
cov.effect.C=cov.effect.C
cov.EC=cov.EC
cov.cor.EC=cov.cor.EC
cov.effect.EC=cov.effect.EC
method.whomatch=method.whomatch
method.matching=method.matching
method.psorder=method.psorder
method.borrow=method.borrow
nsim=100
seed=100
method.psest="glm"
method.pslink="logit"
chains=2
iter=4000
warmup=floor(iter/2)
thin=1
alternative="greater"
sig.level=0.025
reject <- NULL
theta  <- NULL
ov     <- NULL
set.seed(seed)
for(ss in 1:nsim){
indata <- trial.simulation.t2e(
n.CT=n.CT, n.CC=n.CC, nevent.C=nevent.C,
n.ECp=n.ECp, nevent.ECp=nevent.ECp, accrual=accrual,
out.mevent.CT, out.mevent.CC, driftHR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC)
out.psmatch <- psmatch(
indata=indata, n.EC=n.EC,
method.psest=method.psest, method.pslink=method.pslink,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
subjid.EC <- out.psmatch$subjid.EC
out.commensurate <- commensurate.t2e(
indata=indata, subjid.EC=subjid.EC, method.borrow=method.borrow,
chains=chains, iter=iter, warmup=warmup, thin=thin,
alternative=alternative, sig.level=sig.level)
reject <- rbind(reject,data.frame(sim=ss,out.commensurate$reject))
theta  <- rbind(theta,data.frame(sim=ss,out.commensurate$theta))
data.cov.ps <- out.psmatch$data.cov.ps
Z1 <- data.cov.ps[(data.cov.ps$study==1)&(data.cov.ps$treat==1),]
Z2 <- rbind(data.cov.ps[(data.cov.ps$study==1)&(data.cov.ps$treat==0),],data.cov.ps[subjid.EC,])
pslist <- list(Z1=Z1[,"ps"],Z2=Z2[,"ps"])
ov.ps  <- (overlap(pslist,boundaries=c(0,1)))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor="ps",type="continuous",ov=ov.ps))
for(i in 1:(indata$ncov)){
tmp.cov <- paste("X",i,sep="")
pslist  <- list(Z1=Z1[,tmp.cov],Z2=Z2[,tmp.cov])
if(cov.C[[i]]$dist=="norm"){
ov.cov <- (overlap(pslist))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor=paste("cov",i,sep=""),type="continuous",ov=ov.cov))
}else if(cov.C[[i]]$dist=="binom"){
ov.cov <- mean(pslist$Z1)-mean(pslist$Z2)
ov     <- rbind(ov,data.frame(sim=ss,factor=paste("cov",i,sep=""),type="binary",ov=ov.cov))
}
}
}
library(psBayesborrow)
for(ss in 1:nsim){
indata <- trial.simulation.t2e(
n.CT=n.CT, n.CC=n.CC, nevent.C=nevent.C,
n.ECp=n.ECp, nevent.ECp=nevent.ECp, accrual=accrual,
out.mevent.CT, out.mevent.CC, driftHR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC)
out.psmatch <- psmatch(
indata=indata, n.EC=n.EC,
method.psest=method.psest, method.pslink=method.pslink,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
subjid.EC <- out.psmatch$subjid.EC
out.commensurate <- commensurate.t2e(
indata=indata, subjid.EC=subjid.EC, method.borrow=method.borrow,
chains=chains, iter=iter, warmup=warmup, thin=thin,
alternative=alternative, sig.level=sig.level)
reject <- rbind(reject,data.frame(sim=ss,out.commensurate$reject))
theta  <- rbind(theta,data.frame(sim=ss,out.commensurate$theta))
data.cov.ps <- out.psmatch$data.cov.ps
Z1 <- data.cov.ps[(data.cov.ps$study==1)&(data.cov.ps$treat==1),]
Z2 <- rbind(data.cov.ps[(data.cov.ps$study==1)&(data.cov.ps$treat==0),],data.cov.ps[subjid.EC,])
pslist <- list(Z1=Z1[,"ps"],Z2=Z2[,"ps"])
ov.ps  <- (overlap(pslist,boundaries=c(0,1)))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor="ps",type="continuous",ov=ov.ps))
for(i in 1:(indata$ncov)){
tmp.cov <- paste("X",i,sep="")
pslist  <- list(Z1=Z1[,tmp.cov],Z2=Z2[,tmp.cov])
if(cov.C[[i]]$dist=="norm"){
ov.cov <- (overlap(pslist))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor=paste("cov",i,sep=""),type="continuous",ov=ov.cov))
}else if(cov.C[[i]]$dist=="binom"){
ov.cov <- mean(pslist$Z1)-mean(pslist$Z2)
ov     <- rbind(ov,data.frame(sim=ss,factor=paste("cov",i,sep=""),type="binary",ov=ov.cov))
}
}
}
commensurate.t2e(
indata=indata, subjid.EC=subjid.EC, method.borrow=method.borrow,
chains=chains, iter=iter, warmup=warmup, thin=thin,
alternative=alternative, sig.level=sig.level)
indata
subjid.EC
method.borrow
commensurate.t2e <- function(
indata, subjid.EC, method.borrow,
chains=2, iter=4000, warmup=floor(iter/2), thin=1,
alternative="greater", sig.level=0.025)
{
ncov      <- indata$ncov
cov.lab   <- paste("X",1:ncov,sep="")
data.outp <- indata$data
data.out  <- rbind(data.outp[data.outp$study==1,],data.outp[subjid.EC,])
censor.CT <- data.out[(data.out$study==1)&(data.out$treat==1),"censor"]
data.CT   <- data.out[(data.out$study==1)&(data.out$treat==1),c("y",cov.lab)]
censor.CC <- data.out[(data.out$study==1)&(data.out$treat==0),"censor"]
data.CC   <- data.out[(data.out$study==1)&(data.out$treat==0),c("y",cov.lab)]
censor.EC <- data.out[(data.out$study==0)&(data.out$treat==0),"censor"]
data.EC   <- data.out[(data.out$study==0)&(data.out$treat==0),c("y",cov.lab)]
nmethod    <- length(method.borrow)
method.lab <- character(nmethod)
reject <- data.frame(X0="reject")
theta  <- data.frame(X0=c("mean","median","sd","lcri","ucri"))
for(i in 1:nmethod){
if(sum(censor.CC==1)>0){
if(method.borrow[[i]]$prior=="noborrow"){
dat <- list(
nCT_o = sum(censor.CT==0),
nCT_c = sum(censor.CT==1),
nCC_o = sum(censor.CC==0),
nCC_c = sum(censor.CC==1),
p     = ncov,
yCT_o = as.array(data.CT[censor.CT==0,1]),
yCT_c = as.array(data.CT[censor.CT==1,1]),
yCC_o = as.array(data.CC[censor.CC==0,1]),
yCC_c = as.array(data.CC[censor.CC==1,1]),
xCT_o = matrix(as.matrix(data.CT[censor.CT==0,-1]),sum(censor.CT==0),ncov),
xCT_c = matrix(as.matrix(data.CT[censor.CT==1,-1]),sum(censor.CT==1),ncov),
xCC_o = matrix(as.matrix(data.CC[censor.CC==0,-1]),sum(censor.CC==0),ncov),
xCC_c = matrix(as.matrix(data.CC[censor.CC==1,-1]),sum(censor.CC==1),ncov))
mcmc <- rstan::sampling(stanmodels$T2ENoborrow,
data          = dat,
chains        = chains,
iter          = iter,
warmup        = warmup,
thin          = thin,
show_messages = FALSE,
cores         = 1,
refresh       = 0)
mcmc.sample <- rstan::extract(mcmc)
}else if(method.borrow[[i]]$prior=="fullborrow"){
dat <- list(
nCT_o = sum(censor.CT==0),
nCT_c = sum(censor.CT==1),
nCC_o = sum(censor.CC==0),
nCC_c = sum(censor.CC==1),
nEC_o = sum(censor.EC==0),
nEC_c = sum(censor.EC==1),
p     = ncov,
yCT_o = as.array(data.CT[censor.CT==0,1]),
yCT_c = as.array(data.CT[censor.CT==1,1]),
yCC_o = as.array(data.CC[censor.CC==0,1]),
yCC_c = as.array(data.CC[censor.CC==1,1]),
yEC_o = as.array(data.EC[censor.EC==0,1]),
yEC_c = as.array(data.EC[censor.EC==1,1]),
xCT_o = matrix(as.matrix(data.CT[censor.CT==0,-1]),sum(censor.CT==0),ncov),
xCT_c = matrix(as.matrix(data.CT[censor.CT==1,-1]),sum(censor.CT==1),ncov),
xCC_o = matrix(as.matrix(data.CC[censor.CC==0,-1]),sum(censor.CC==0),ncov),
xCC_c = matrix(as.matrix(data.CC[censor.CC==1,-1]),sum(censor.CC==1),ncov),
xEC_o = matrix(as.matrix(data.EC[censor.EC==0,-1]),sum(censor.EC==0),ncov),
xEC_c = matrix(as.matrix(data.EC[censor.EC==1,-1]),sum(censor.EC==1),ncov))
mcmc <- rstan::sampling(stanmodels$T2EFullborrow,
data          = dat,
chains        = chains,
iter          = iter,
warmup        = warmup,
thin          = thin,
show_messages = FALSE,
cores         = 1,
refresh       = 0)
mcmc.sample <- rstan::extract(mcmc)
}else if(method.borrow[[i]]$prior=="cauchy"){
dat <- list(
nCT_o = sum(censor.CT==0),
nCT_c = sum(censor.CT==1),
nCC_o = sum(censor.CC==0),
nCC_c = sum(censor.CC==1),
nEC_o = sum(censor.EC==0),
nEC_c = sum(censor.EC==1),
p     = ncov,
yCT_o = as.array(data.CT[censor.CT==0,1]),
yCT_c = as.array(data.CT[censor.CT==1,1]),
yCC_o = as.array(data.CC[censor.CC==0,1]),
yCC_c = as.array(data.CC[censor.CC==1,1]),
yEC_o = as.array(data.EC[censor.EC==0,1]),
yEC_c = as.array(data.EC[censor.EC==1,1]),
xCT_o = matrix(as.matrix(data.CT[censor.CT==0,-1]),sum(censor.CT==0),ncov),
xCT_c = matrix(as.matrix(data.CT[censor.CT==1,-1]),sum(censor.CT==1),ncov),
xCC_o = matrix(as.matrix(data.CC[censor.CC==0,-1]),sum(censor.CC==0),ncov),
xCC_c = matrix(as.matrix(data.CC[censor.CC==1,-1]),sum(censor.CC==1),ncov),
xEC_o = matrix(as.matrix(data.EC[censor.EC==0,-1]),sum(censor.EC==0),ncov),
xEC_c = matrix(as.matrix(data.EC[censor.EC==1,-1]),sum(censor.EC==1),ncov),
scale = method.borrow[[i]]$scale)
mcmc <- rstan::sampling(stanmodels$T2ECauchy,
data          = dat,
chains        = chains,
iter          = iter,
warmup        = warmup,
thin          = thin,
show_messages = FALSE,
cores         = 1,
refresh       = 0)
mcmc.sample <- rstan::extract(mcmc)
}else if(method.borrow[[i]]$prior=="normal"){
dat <- list(
nCT_o = sum(censor.CT==0),
nCT_c = sum(censor.CT==1),
nCC_o = sum(censor.CC==0),
nCC_c = sum(censor.CC==1),
nEC_o = sum(censor.EC==0),
nEC_c = sum(censor.EC==1),
p     = ncov,
yCT_o = as.array(data.CT[censor.CT==0,1]),
yCT_c = as.array(data.CT[censor.CT==1,1]),
yCC_o = as.array(data.CC[censor.CC==0,1]),
yCC_c = as.array(data.CC[censor.CC==1,1]),
yEC_o = as.array(data.EC[censor.EC==0,1]),
yEC_c = as.array(data.EC[censor.EC==1,1]),
xCT_o = matrix(as.matrix(data.CT[censor.CT==0,-1]),sum(censor.CT==0),ncov),
xCT_c = matrix(as.matrix(data.CT[censor.CT==1,-1]),sum(censor.CT==1),ncov),
xCC_o = matrix(as.matrix(data.CC[censor.CC==0,-1]),sum(censor.CC==0),ncov),
xCC_c = matrix(as.matrix(data.CC[censor.CC==1,-1]),sum(censor.CC==1),ncov),
xEC_o = matrix(as.matrix(data.EC[censor.EC==0,-1]),sum(censor.EC==0),ncov),
xEC_c = matrix(as.matrix(data.EC[censor.EC==1,-1]),sum(censor.EC==1),ncov),
scale = method.borrow[[i]]$scale)
mcmc <- rstan::sampling(stanmodels$T2ENormal,
data          = dat,
chains        = chains,
iter          = iter,
warmup        = warmup,
thin          = thin,
show_messages = FALSE,
cores         = 1,
refresh       = 0)
mcmc.sample <- rstan::extract(mcmc)
}
}else if(sum(censor.CC==1)==0){
if(method.borrow[[i]]$prior=="noborrow"){
dat <- list(
nCT_o = sum(censor.CT==0),
nCT_c = sum(censor.CT==1),
nCC_o = sum(censor.CC==0),
p     = ncov,
yCT_o = as.array(data.CT[censor.CT==0,1]),
yCT_c = as.array(data.CT[censor.CT==1,1]),
yCC_o = as.array(data.CC[censor.CC==0,1]),
xCT_o = matrix(as.matrix(data.CT[censor.CT==0,-1]),sum(censor.CT==0),ncov),
xCT_c = matrix(as.matrix(data.CT[censor.CT==1,-1]),sum(censor.CT==1),ncov),
xCC_o = matrix(as.matrix(data.CC[censor.CC==0,-1]),sum(censor.CC==0),ncov))
mcmc <- rstan::sampling(stanmodels$T2ENoborrowC0,
data          = dat,
chains        = chains,
iter          = iter,
warmup        = warmup,
thin          = thin,
show_messages = FALSE,
cores         = 1,
refresh       = 0)
mcmc.sample <- rstan::extract(mcmc)
}else if(method.borrow[[i]]$prior=="fullborrow"){
dat <- list(
nCT_o = sum(censor.CT==0),
nCT_c = sum(censor.CT==1),
nCC_o = sum(censor.CC==0),
nEC_o = sum(censor.EC==0),
nEC_c = sum(censor.EC==1),
p     = ncov,
yCT_o = as.array(data.CT[censor.CT==0,1]),
yCT_c = as.array(data.CT[censor.CT==1,1]),
yCC_o = as.array(data.CC[censor.CC==0,1]),
yEC_o = as.array(data.EC[censor.EC==0,1]),
yEC_c = as.array(data.EC[censor.EC==1,1]),
xCT_o = matrix(as.matrix(data.CT[censor.CT==0,-1]),sum(censor.CT==0),ncov),
xCT_c = matrix(as.matrix(data.CT[censor.CT==1,-1]),sum(censor.CT==1),ncov),
xCC_o = matrix(as.matrix(data.CC[censor.CC==0,-1]),sum(censor.CC==0),ncov),
xEC_o = matrix(as.matrix(data.EC[censor.EC==0,-1]),sum(censor.EC==0),ncov),
xEC_c = matrix(as.matrix(data.EC[censor.EC==1,-1]),sum(censor.EC==1),ncov))
mcmc <- rstan::sampling(stanmodels$T2EFullborrowC0,
data          = dat,
chains        = chains,
iter          = iter,
warmup        = warmup,
thin          = thin,
show_messages = FALSE,
cores         = 1,
refresh       = 0)
mcmc.sample <- rstan::extract(mcmc)
}else if(method.borrow[[i]]$prior=="cauchy"){
dat <- list(
nCT_o = sum(censor.CT==0),
nCT_c = sum(censor.CT==1),
nCC_o = sum(censor.CC==0),
nEC_o = sum(censor.EC==0),
nEC_c = sum(censor.EC==1),
p     = ncov,
yCT_o = as.array(data.CT[censor.CT==0,1]),
yCT_c = as.array(data.CT[censor.CT==1,1]),
yCC_o = as.array(data.CC[censor.CC==0,1]),
yEC_o = as.array(data.EC[censor.EC==0,1]),
yEC_c = as.array(data.EC[censor.EC==1,1]),
xCT_o = matrix(as.matrix(data.CT[censor.CT==0,-1]),sum(censor.CT==0),ncov),
xCT_c = matrix(as.matrix(data.CT[censor.CT==1,-1]),sum(censor.CT==1),ncov),
xCC_o = matrix(as.matrix(data.CC[censor.CC==0,-1]),sum(censor.CC==0),ncov),
xEC_o = matrix(as.matrix(data.EC[censor.EC==0,-1]),sum(censor.EC==0),ncov),
xEC_c = matrix(as.matrix(data.EC[censor.EC==1,-1]),sum(censor.EC==1),ncov),
scale = method.borrow[[i]]$scale)
mcmc <- rstan::sampling(stanmodels$T2ECauchyC0,
data          = dat,
chains        = chains,
iter          = iter,
warmup        = warmup,
thin          = thin,
show_messages = FALSE,
cores         = 1,
refresh       = 0)
mcmc.sample <- rstan::extract(mcmc)
}else if(method.borrow[[i]]$prior=="normal"){
dat <- list(
nCT_o = sum(censor.CT==0),
nCT_c = sum(censor.CT==1),
nCC_o = sum(censor.CC==0),
nEC_o = sum(censor.EC==0),
nEC_c = sum(censor.EC==1),
p     = ncov,
yCT_o = as.array(data.CT[censor.CT==0,1]),
yCT_c = as.array(data.CT[censor.CT==1,1]),
yCC_o = as.array(data.CC[censor.CC==0,1]),
yEC_o = as.array(data.EC[censor.EC==0,1]),
yEC_c = as.array(data.EC[censor.EC==1,1]),
xCT_o = matrix(as.matrix(data.CT[censor.CT==0,-1]),sum(censor.CT==0),ncov),
xCT_c = matrix(as.matrix(data.CT[censor.CT==1,-1]),sum(censor.CT==1),ncov),
xCC_o = matrix(as.matrix(data.CC[censor.CC==0,-1]),sum(censor.CC==0),ncov),
xEC_o = matrix(as.matrix(data.EC[censor.EC==0,-1]),sum(censor.EC==0),ncov),
xEC_c = matrix(as.matrix(data.EC[censor.EC==1,-1]),sum(censor.EC==1),ncov),
scale = method.borrow[[i]]$scale)
mcmc <- rstan::sampling(stanmodels$T2ENormalC0,
data          = dat,
chains        = chains,
iter          = iter,
warmup        = warmup,
thin          = thin,
show_messages = FALSE,
cores         = 1,
refresh       = 0)
mcmc.sample <- rstan::extract(mcmc)
}
}
loghr <- mcmc.sample$theta
if(alternative=="greater"){
postprob <- mean(loghr>0)
}else if(alternative=="less"){
postprob <- mean(loghr<0)
}
cri <- quantile(loghr,c(sig.level,1-sig.level))
reject.v <- (postprob>(1-sig.level))
reject   <- data.frame(reject,X1=reject.v)
theta.v <- c(mean(loghr),median(loghr),sd(loghr),cri[[1]],cri[[2]])
theta   <- data.frame(theta,X1=theta.v)
mname <- method.borrow[[i]]$prior
if((mname=="noborrow")|(mname=="fullborrow")){
method.lab[i] <- mname
}else if((mname=="cauchy")|(mname=="normal")){
method.lab[i] <- paste(mname,method.borrow[[i]]$scale)
}
}
colnames(reject) <- c("measure",mname)
colnames(theta)  <- c("measure",mname)
return(list(reject=reject,theta=theta))
}
out.commensurate <- commensurate.t2e(
indata=indata, subjid.EC=subjid.EC, method.borrow=method.borrow,
chains=chains, iter=iter, warmup=warmup, thin=thin,
alternative=alternative, sig.level=sig.level)
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
aa<-rbing(c(TRUE,TRUE),
c(FALSE,FALSE))
aa<-rbind(c(TRUE,TRUE),
c(FALSE,FALSE))
aa
aa<-rbind(c(TRUE,TRUE),
c(FALSE,FALSE))
bb<-rbind(c(TRUE,TRUE),
c(TRUE,FALSE))
aa*bb
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
psborrow.summary
library(psBayesborrow)
n.CT       <- 100
n.CC       <- 50
nevent.C   <- 100
n.ECp      <- 1000
nevent.ECp <- 800
n.EC       <- 50
accrual    <- 16
out.mevent.CT <- 6
out.mevent.CC <- 6
driftHR       <- 1
cov.C <- list(list(dist="norm",mean=0,sd=1),
list(dist="binom",prob=0.4))
cov.cor.C <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.C <- c(0.1,0.1)
cov.EC <- list(list(dist="norm",mean=0,sd=1),
list(dist="binom",prob=0.4))
cov.cor.EC <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.EC <- c(0.1,0.1)
method.whomatch <- "conc.treat"
method.matching <- "optimal"
method.psorder  <- NULL
method.borrow <- list(list(prior="noborrow"),
list(prior="normal",scale=0.5))
nsim <- 100
res <- psborrow.t2e(
n.CT=n.CT, n.CC=n.CC, nevent.C=nevent.C,
n.ECp=n.ECp, nevent.ECp=nevent.ECp, n.EC=n.EC, accrual=accrual,
out.mevent.CT=out.mevent.CT, out.mevent.CC=out.mevent.CC, driftHR=driftHR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC,
method.whomatch=method.whomatch,
method.matching=method.matching, method.psorder=method.psorder,
method.borrow=method.borrow, nsim=100, seed=100)
psborrow.summary(res)
res$res.out
res
aa<-psborrow.summary(res)
aa
aa$res.out
x<-res
ptab1 <- rbind(
x$n.CT,
x$n.CC,
x$n.ECp,
x$n.EC,
x$drift)
rnames <- c("No. of conc. treatment",
"No. of conc. control",
"No. of ext. control pool",
"No. of ext. control",
"Prior data conflict")
dimnames(ptab1) <- list(rnames,"")
ptab1
x$res.out
x$res.out
aa$res.out
x$res.out
aa$res.out
aa$res.out
aa
aa$res.out
aa$res.out
aa$res.out[,-1]
ptab1 <- aa$res.out[,-1]
rnames <- c("Reject","Bias","EmpSD","ModSD","EmpSD/ModSD","Coverage Prob.")
dimnames(ptab1) <- list(rnames,names(aa$res.out[,-1]))
ptab1
aa$res.cov
aa$res.cov[,1]
ptab2  <- aa$res.cov[,-1]
rnames <- aa$res.cov[,1]
dimnames(ptab2) <- list(rnames,names(aa$res.cov[,-1]))
ptab2
library(psBayesborrow)
library(psBayesborrow)
print.psborrow.summary
print.psborrow.summary()
psborrow.summary
library(psBayesborrow)
