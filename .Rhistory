list.files(all.files = TRUE)
list.files(all.files = TRUE)
file.show("DESCRIPTION")
file.remove('Read-and-delete-me')
n.CT  <- 100
n.CC  <- 100
n.EC  <- 200
out.prob.CT <- 0.2
out.prob.CC <- 0.2
driftOR     <- c(0.6,1.0,1.4)
cov.CT <- list(list(dist="norm", mean=0,sd=1),
list(dist="binom",prob=0.4))
cov.CC <- list(list(dist="norm", mean=0,sd=1),
list(dist="binom",prob=0.4))
cov.EC <- list(list(dist="norm", mean=0,sd=1),
list(dist="binom",prob=0.4))
cormat <- rbind(c(  1,0.1,0.1),
c(0.1,  1,0.1),
c(0.1,0.1,  1))
library(iaborrow)
iaborrow.bin
prior <- list(list(method="noborrow"),
list(method="fullborrow"),
list(method="cauchy",sigma=0.5),
list(method="normal",sigma=0.5))
dim(prior)
prior
length(prior)
method
method <- list(list(method="noborrow"),
list(method="fullborrow"),
list(method="cauchy",sigma=0.5),
list(method="normal",sigma=0.5))
method <- list(list(prior="noborrow"),
list(prior="fullborrow"),
list(prior="cauchy",sigma=0.5),
list(prior="normal",sigma=0.5))
method$prior
method
i=1
method[[i]]
method[[i]]$prior
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
getLoadedDLLs()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
example(source)
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
roxygen2::roxygenize()
library(psBayesborrow)
data.frame(rbind(1:4,5:8))
aa<-data.frame(rbind(1:4,5:8))
aa<-data.frame(measure=c("a","b"),rbind(1:4,5:8))
aa
aa<-data.frame(measure=c("a","b"),rbind(1:4,5:8))
colnames(aa) <- c("measure","a","b","c","d")
aa
try(roxygen2::roxygenize(load_code = sourceDir), silent = TRUE)
roxygen2::roxygenize()
pkgbuild::compile_dll()
roxygen2::roxygenize()
pkgbuild::compile_dll(path = ".", force = T)
library(psBayesborrow)
pkgbuild::compile_dll(path = ".", force = T)
pkgbuild::compile_dll(path = ".", force = T)
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
commensurate.t2e
pkgbuild::compile_dll(path = ".", force = T)
library(psBayesborrow)
commensurate.t2e
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
commensurate.summary
list(dist="binom",prob=0.4))
n.CT  <- 50
n.CC  <- 50
n.EC  <- 50
out.prob.CT <- 0.2
out.prob.CC <- 0.2
driftOR     <- 1.0
cov.C <- list(list(dist="norm", mean=0,sd=1),
list(dist="binom",prob=0.4))
cov.cor.C <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.C <- c(0.1,0.1)
cov.E <- list(list(dist="norm", mean=0,sd=1),
list(dist="binom",prob=0.4))
cov.cor.E <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.E <- c(0.1,0.1)
method <- list(list(prior="noborrow"),
list(prior="normal",scale=0.5))
nsim <- 5
ncov        <- length(cov.CT)
ncov        <- length(cov.C)
out.prob.EC <- (driftOR*out.prob.CC/(1-out.prob.CC))/(1+driftOR*out.prob.CC/(1-out.prob.CC))
nmethod     <- length(method)
marg.C <- NULL
marg.E <- NULL
mean.C <- NULL
mean.E <- NULL
for(i in 1:ncov){
if(cov.CT[[i]]$dist=="norm"){
marg.C <- append(marg.C,list(list(dist=cov.C[[i]]$dist,parm=list(mean=cov.C[[i]]$mean,sd=cov.C[[i]]$sd))))
marg.E <- append(marg.E,list(list(dist=cov.E[[i]]$dist,parm=list(mean=cov.E[[i]]$mean,sd=cov.E[[i]]$sd))))
mean.C <- c(mean.C,cov.C[[i]]$mean)
mean.E <- c(mean.E,cov.E[[i]]$mean)
}else if(cov.CT[[i]]$dist=="binom"){
marg.C <- append(marg.C,list(list(dist=cov.C[[i]]$dist,parm=list(size=1,prob=cov.C[[i]]$prob))))
marg.E <- append(marg.E,list(list(dist=cov.E[[i]]$dist,parm=list(size=1,prob=cov.E[[i]]$prob))))
mean.C <- c(mean.C,cov.C[[i]]$prob)
mean.E <- c(mean.E,cov.E[[i]]$prob)
}
}
marg.C <- NULL
marg.E <- NULL
mean.C <- NULL
mean.E <- NULL
for(i in 1:ncov){
if(cov.C[[i]]$dist=="norm"){
marg.C <- append(marg.C,list(list(dist=cov.C[[i]]$dist,parm=list(mean=cov.C[[i]]$mean,sd=cov.C[[i]]$sd))))
marg.E <- append(marg.E,list(list(dist=cov.E[[i]]$dist,parm=list(mean=cov.E[[i]]$mean,sd=cov.E[[i]]$sd))))
mean.C <- c(mean.C,cov.C[[i]]$mean)
mean.E <- c(mean.E,cov.E[[i]]$mean)
}else if(cov.C[[i]]$dist=="binom"){
marg.C <- append(marg.C,list(list(dist=cov.C[[i]]$dist,parm=list(size=1,prob=cov.C[[i]]$prob))))
marg.E <- append(marg.E,list(list(dist=cov.E[[i]]$dist,parm=list(size=1,prob=cov.E[[i]]$prob))))
mean.C <- c(mean.C,cov.C[[i]]$prob)
mean.E <- c(mean.E,cov.E[[i]]$prob)
}
}
int.C   <- log(out.prob.CC/(1-out.prob.CC))-sum(mean.C*cov.effect.C)
int.E   <- log(out.prob.EC/(1-out.prob.EC))-sum(mean.E*cov.effect.E)
t.theta <- log(out.prob.CT/(1-out.prob.CT))-log(out.prob.CC/(1-out.prob.CC))
cvec.C  <- cov.cor.C[lower.tri(cov.cor.C)]
cvec.E  <- cov.cor.E[lower.tri(cov.cor.E)]
reject <- array(0,dim=c(nsim,nmethod))
theta  <- array(0,dim=c(nsim,nmethod,3))
t.theta
int.C
ss=1
data.cov.CT <- datagen(margdist=marg.C,corvec=cvec.C,nsim=n.CT)
data.cov.CT <- datagen(margdist=marg.C,corvec=cvec.C,nsim=n.CT)
marg.C
cvec.C
cov.cor.C
n.CT
data.cov.CT <- datagen(margdist=marg.C,corvec=cvec.C,nsim=n.CT)
datagen <- function(margdist,corvec,nsim)
{
varnum <- length(margdist)
cormat <- copula::normalCopula(param=corvec,dim=varnum,dispstr="un")
dist <- NULL
parm <- NULL
for(i in 1:varnum){
dist <- c(dist,(margdist[[i]])$dist)
parm <- append(parm,list((margdist[[i]])$parm))
}
mycop <- copula::mvdc(copula=cormat,margins=dist,paramMargins=parm)
return(copula::rMvdc(nsim,mycop))
}
data.cov.CT <- datagen(margdist=marg.C,corvec=cvec.C,nsim=n.CT)
data.cov.CC <- datagen(margdist=marg.C,corvec=cvec.C,nsim=n.CC)
data.cov.EC <- datagen(margdist=marg.E,corvec=cvec.E,nsim=n.EC)
p.CT <- boot::inv.logit(int.C+t.theta+apply(data.cov.CT,1,function(x){sum(x*cov.effect.C)}))
p.CC <- boot::inv.logit(int.C        +apply(data.cov.CC,1,function(x){sum(x*cov.effect.C)}))
p.EC <- boot::inv.logit(int.E        +apply(data.cov.EC,1,function(x){sum(x*cov.effect.E)}))
data.CT <- cbind(rbinom(n.CT,1,p.CT),data.cov.CT)
data.CC <- cbind(rbinom(n.CC,1,p.CC),data.cov.CC)
data.EC <- cbind(rbinom(n.EC,1,p.EC),data.cov.EC)
data.CT
data.EC
data.CC
library(psBayesborrow)
rnorm(10,c(1:10),1)
aa<-numeric(10)
for(i in 1:10000){
aa <- aa+rnorm(10,1:10,1)
}
aa/10000
exp(0.1)
exp(0.3)
exp(-0.3)
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
library(psBayesborrow)
