mean.C  <- c(mean.C, cov.C[[i]]$prob)
mean.EC <- c(mean.EC,cov.EC[[i]]$prob)
cov.lab <- c(cov.lab,cov.C[[i]]$lab)
}
}
int.C   <- log(1/out.lambda.CC)-sum(mean.C*lcov.effect.C)
int.EC  <- log(1/out.lambda.EC)-sum(mean.EC*lcov.effect.EC)
t.theta <- log(out.lambda.CC/out.lambda.CT)
cvec.C  <- cov.cor.C[lower.tri(cov.cor.C)]
cvec.EC <- cov.cor.EC[lower.tri(cov.cor.EC)]
data.cov.CT  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CT)
data.cov.CC  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CC)
data.cov.ECp <- datagen(margdist=marg.EC,corvec=cvec.EC,nsim=n.ECp)
sigma.CT  <- exp(int.C +t.theta+apply(data.cov.CT, 1,function(x){sum(x*lcov.effect.C)}))
sigma.CC  <- exp(int.C         +apply(data.cov.CC, 1,function(x){sum(x*lcov.effect.C)}))
sigma.ECp <- exp(int.EC        +apply(data.cov.ECp,1,function(x){sum(x*lcov.effect.EC)}))
data.CT  <- cbind(rweibull(n.CT, shape=1,scale=sigma.CT), data.cov.CT)
data.CC  <- cbind(rweibull(n.CC, shape=1,scale=sigma.CC), data.cov.CC)
data.ECp <- cbind(rweibull(n.ECp,shape=1,scale=sigma.ECp),data.cov.ECp)
enroll.period.C <- floor((n.CT+n.CC)/accrual)
mn.CT <- floor(n.CT/enroll.period.C)
mn.CC <- floor(n.CC/enroll.period.C)
enroll.time.CT <- NULL
enroll.time.CC <- NULL
for(i in 1:enroll.period.C){
e.st <- i-1
e.en <- i
enroll.time.CT <- c(enroll.time.CT,runif(mn.CT,e.st,e.en))
enroll.time.CC <- c(enroll.time.CC,runif(mn.CC,e.st,e.en))
}
enroll.time.CT <- c(enroll.time.CT,runif(n.CT-length(enroll.time.CT),enroll.period.C,enroll.period.C+1))
enroll.time.CC <- c(enroll.time.CC,runif(n.CC-length(enroll.time.CC),enroll.period.C,enroll.period.C+1))
enroll.period.ECp <- floor(n.ECp/accrual)
enroll.time.ECp <- NULL
for(i in 1:enroll.period.ECp){
e.st <- i-1
e.en <- i
enroll.time.ECp <- c(enroll.time.ECp,runif(accrual,e.st,e.en))
}
enroll.time.ECp <- c(enroll.time.ECp,runif(n.ECp-length(enroll.time.ECp),enroll.period.ECp,enroll.period.ECp+1))
obs.time.CT  <- data.CT[,1] +enroll.time.CT
obs.time.CC  <- data.CC[,1] +enroll.time.CC
obs.time.ECp <- data.ECp[,1]+enroll.time.ECp
last.sub.C   <- sort(c(obs.time.CT,obs.time.CC))[nevent.C]
last.sub.ECp <- sort(obs.time.ECp)[nevent.ECp]
censor.CT  <- as.numeric(obs.time.CT>last.sub.C)
censor.CC  <- as.numeric(obs.time.CC>last.sub.C)
censor.ECp <- as.numeric(obs.time.ECp>last.sub.ECp)
cenf <- (obs.time.CT>last.sub.C)
data.CT[cenf,1] <- data.CT[cenf,1]-(obs.time.CT[cenf]-last.sub.C)
cenf <- (obs.time.CC>last.sub.C)
data.CC[cenf,1] <- data.CC[cenf,1]-(obs.time.CC[cenf]-last.sub.C)
cenf <- (obs.time.ECp>last.sub.ECp)
data.ECp[cenf,1] <- data.ECp[cenf,1]-(obs.time.ECp[cenf]-last.sub.ECp)
censor.CT <- censor.CT[data.CT[,1]>0]
data.CT   <- data.CT[data.CT[,1]>0,]
censor.CC <- censor.CC[data.CC[,1]>0]
data.CC   <- data.CC[data.CC[,1]>0,]
censor.ECp <- censor.ECp[data.ECp[,1]>0]
data.ECp   <- data.ECp[data.ECp[,1]>0,]
outdata <- rbind(
data.frame(study=1,treat=1,time=data.CT[,1], status=1-censor.CT, data.CT[,-1]),
data.frame(study=1,treat=0,time=data.CC[,1], status=1-censor.CC, data.CC[,-1]),
data.frame(study=0,treat=0,time=data.ECp[,1],status=1-censor.ECp,data.ECp[,-1]))
colnames(outdata) <- c("study","treat","time","status",cov.lab)
return(outdata)
}
psborrow.t2e(
n.CT=n.CT, n.CC=n.CC, nevent.C=nevent.C,
n.ECp=n.ECp, nevent.ECp=nevent.ECp, n.EC=n.EC, accrual=accrual,
out.mevent.CT=out.mevent.CT, out.mevent.CC=out.mevent.CC, driftHR=driftHR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC,
psmatch.cov=psmatch.cov, method.whomatch=method.whomatch,
method.matching=method.matching, method.psorder=method.psorder,
analysis.cov=analysis.cov, method.borrow=method.borrow,
nsim=nsim, seed=100)
watnings()
warnings()
trial.simulation.cont <- function(
n.CT, n.CC, n.ECp,
out.mean.CT, out.sd.CT, out.mean.CC, out.sd.CC, driftdiff, out.sd.EC,
cov.C, cov.cor.C, cov.effect.C,
cov.EC, cov.cor.EC, cov.effect.EC)
{
ncov        <- length(cov.C)
out.mean.EC <- driftdiff+out.mean.CC
marg.C  <- NULL
marg.EC <- NULL
mean.C  <- NULL
mean.EC <- NULL
cov.lab <- NULL
for(i in 1:ncov){
if(cov.C[[i]]$dist=="norm"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(mean=cov.C[[i]]$mean, sd=cov.C[[i]]$sd))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(mean=cov.EC[[i]]$mean,sd=cov.EC[[i]]$sd))))
mean.C  <- c(mean.C, cov.C[[i]]$mean)
mean.EC <- c(mean.EC,cov.EC[[i]]$mean)
cov.lab <- c(cov.lab,cov.C[[i]]$lab)
}else if(cov.C[[i]]$dist=="binom"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(size=1,prob=cov.C[[i]]$prob))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(size=1,prob=cov.EC[[i]]$prob))))
mean.C  <- c(mean.C, cov.C[[i]]$prob)
mean.EC <- c(mean.EC,cov.EC[[i]]$prob)
cov.lab <- c(cov.lab,cov.C[[i]]$lab)
}
}
int.C   <- out.mean.CC-sum(mean.C*cov.effect.C)
int.EC  <- out.mean.EC-sum(mean.EC*cov.effect.EC)
t.theta <- out.mean.CT-out.mean.CC
cvec.C  <- cov.cor.C[lower.tri(cov.cor.C)]
cvec.EC <- cov.cor.EC[lower.tri(cov.cor.EC)]
data.cov.CT  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CT)
data.cov.CC  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CC)
data.cov.ECp <- datagen(margdist=marg.EC,corvec=cvec.EC,nsim=n.ECp)
mu.CT  <- int.C +t.theta+apply(data.cov.CT, 1,function(x){sum(x*cov.effect.C)})
mu.CC  <- int.C         +apply(data.cov.CC, 1,function(x){sum(x*cov.effect.C)})
mu.ECp <- int.EC        +apply(data.cov.ECp,1,function(x){sum(x*cov.effect.EC)})
data.CT  <- cbind(rnorm(n.CT, mean=mu.CT, sd=out.sd.CT),data.cov.CT)
data.CC  <- cbind(rnorm(n.CC, mean=mu.CC, sd=out.sd.CC),data.cov.CC)
data.ECp <- cbind(rnorm(n.ECp,mean=mu.ECp,sd=out.sd.EC),data.cov.ECp)
outdata <- rbind(
data.frame(study=1,treat=1,y=data.CT[,1], data.CT[,-1]),
data.frame(study=1,treat=0,y=data.CC[,1], data.CC[,-1]),
data.frame(study=0,treat=0,y=data.ECp[,1],data.ECp[,-1]))
colnames(outdata) <- c("study","treat","y",cov.lab)
return(outdata)
}
n.CT       <- 100
n.CC       <- 50
n.ECp      <- 1000
n.EC       <- 50
out.mean.CT <- 0
out.sd.CT   <- 1
out.mean.CC <- 0
out.sd.CC   <- 1
driftdiff   <- 0
out.sd.EC   <- 1
cov.C <- list(list(dist="norm",mean=0,sd=1,lab="cov1"),
list(dist="binom",prob=0.4,lab="cov2"))
cov.cor.C <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.C <- c(0.1,0.1)
cov.EC <- list(list(dist="norm",mean=0,sd=1,lab="cov1"),
list(dist="binom",prob=0.4,lab="cov2"))
cov.cor.EC <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.EC <- c(0.1,0.1)
method.whomatch <- "conc.treat"
method.matching <- "optimal"
method.psorder  <- NULL
method.borrow <- list(list(prior="noborrow"),
list(prior="normal",scale=0.5))
nsim <- 5
psmatch.cov <- c("cov1","cov2")
analysis.cov <- c("cov1")
psborrow.cont(
n.CT=n.CT, n.CC=n.CC, n.ECp=n.ECp, n.EC=n.EC,
out.mean.CT=out.mean.CT, out.sd.CT=out.sd.CT,
out.mean.CC=out.mean.CC, out.sd.CC=out.sd.CC,
driftdiff=driftdiff, out.sd.EC=out.sd.EC,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC,
psmatch.cov=psmatch.cov, method.whomatch=method.whomatch,
method.matching=method.matching, method.psorder=method.psorder,
analysis.cov=analysis.cov, method.borrow=method.borrow,
nsim=nsim, seed=100)
psborrow.cont <- function(
n.CT, n.CC, n.ECp, n.EC,
out.mean.CT, out.sd.CT, out.mean.CC, out.sd.CC, driftdiff, out.sd.EC,
cov.C, cov.cor.C, cov.effect.C,
cov.EC, cov.cor.EC, cov.effect.EC,
psmatch.cov,
method.psest="glm", method.pslink="logit",
method.whomatch, method.matching, method.psorder,
analysis.cov, method.borrow,
chains=2, iter=4000, warmup=floor(iter/2), thin=1,
alternative="greater", sig.level=0.025,
nsim, seed=sample.int(.Machine$integer.max,1))
{
reject <- NULL
theta  <- NULL
ov     <- NULL
set.seed(seed)
for(ss in 1:nsim){
indata <- trial.simulation.cont(
n.CT=n.CT, n.CC=n.CC, n.ECp=n.ECp,
out.mean.CT=out.mean.CT, out.sd.CT=out.sd.CT,
out.mean.CC=out.mean.CC, out.sd.CC=out.sd.CC,
driftdiff=driftdiff, out.sd.EC=out.sd.EC,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC)
f1 <- as.formula(paste("study~",paste(psmatch.cov,collapse="+"),sep=""))
out.psmatch <- psmatch(
formula=f1, data=indata, n.EC=n.EC,
method.psest=method.psest, method.pslink=method.pslink,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
indata.match <- rbind(indata[indata$study==1,],indata[out.psmatch$subjid.EC,])
f2 <- as.formula(paste("y~",paste(analysis.cov,collapse="+"),sep=""))
out.commensurate <- commensurate.cont(
formula=f2, data=indata.match, method.borrow=method.borrow,
chains=chains, iter=iter, warmup=warmup, thin=thin,
alternative=alternative, sig.level=sig.level)
reject <- rbind(reject,data.frame(sim=ss,out.commensurate$reject))
theta  <- rbind(theta,data.frame(sim=ss,out.commensurate$theta))
data.ps <- out.psmatch$data.ps
Z1 <- data.ps[(data.ps$study==1)&(data.ps$treat==1),]
Z2 <- rbind(data.ps[(data.ps$study==1)&(data.ps$treat==0),],data.ps[out.psmatch$subjid.EC,])
pslist <- list(Z1=Z1[,"ps"],Z2=Z2[,"ps"])
ov.ps  <- (overlap(pslist,boundaries=c(0,1)))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor="ps",type="continuous",comparison="CTvsCC.EC",ov=ov.ps))
for(i in 1:(indata$ncov)){
tmp.cov <- paste("X",i,sep="")
pslist  <- list(Z1=Z1[,tmp.cov],Z2=Z2[,tmp.cov])
if(cov.C[[i]]$dist=="norm"){
ov.cov <- (overlap(pslist))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor=paste("cov",i,sep=""),type="continuous",comparison="CTvsCC.EC",ov=ov.cov))
}else if(cov.C[[i]]$dist=="binom"){
ov.cov <- mean(pslist$Z1)-mean(pslist$Z2)
ov     <- rbind(ov,data.frame(sim=ss,factor=paste("cov",i,sep=""),type="binary",comparison="CTvsCC.EC",ov=ov.cov))
}
}
Z1 <- data.ps[(data.ps$study==1)&(data.ps$treat==0),]
Z2 <- data.ps[out.psmatch$subjid.EC,]
pslist <- list(Z1=Z1[,"ps"],Z2=Z2[,"ps"])
ov.ps  <- (overlap(pslist,boundaries=c(0,1)))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor="ps",type="continuous",comparison="CCvsEC",ov=ov.ps))
for(i in 1:(indata$ncov)){
tmp.cov <- paste("X",i,sep="")
pslist  <- list(Z1=Z1[,tmp.cov],Z2=Z2[,tmp.cov])
if(cov.C[[i]]$dist=="norm"){
ov.cov <- (overlap(pslist))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor=paste("cov",i,sep=""),type="continuous",comparison="CCvsEC",ov=ov.cov))
}else if(cov.C[[i]]$dist=="binom"){
ov.cov <- mean(pslist$Z1)-mean(pslist$Z2)
ov     <- rbind(ov,data.frame(sim=ss,factor=paste("cov",i,sep=""),type="binary",comparison="CCvsEC",ov=ov.cov))
}
}
}
t.theta <- out.mean.CT-out.mean.CC
return(list(reject=reject,theta=theta,ov=ov,
n.CT=n.CT,n.CC=n.CC,n.ECp=n.ECp,n.EC=n.EC,drift=driftdiff,
true.theta=t.theta,
method.psest=method.psest,method.pslink=method.pslink,
method.whomatch=method.whomatch,
method.matching=method.matching,method.psorder=method.psorder))
}
psborrow.cont(
n.CT=n.CT, n.CC=n.CC, n.ECp=n.ECp, n.EC=n.EC,
out.mean.CT=out.mean.CT, out.sd.CT=out.sd.CT,
out.mean.CC=out.mean.CC, out.sd.CC=out.sd.CC,
driftdiff=driftdiff, out.sd.EC=out.sd.EC,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC,
psmatch.cov=psmatch.cov, method.whomatch=method.whomatch,
method.matching=method.matching, method.psorder=method.psorder,
analysis.cov=analysis.cov, method.borrow=method.borrow,
nsim=nsim, seed=100)
psborrow.cont <- function(
n.CT, n.CC, n.ECp, n.EC,
out.mean.CT, out.sd.CT, out.mean.CC, out.sd.CC, driftdiff, out.sd.EC,
cov.C, cov.cor.C, cov.effect.C,
cov.EC, cov.cor.EC, cov.effect.EC,
psmatch.cov,
method.psest="glm", method.pslink="logit",
method.whomatch, method.matching, method.psorder,
analysis.cov, method.borrow,
chains=2, iter=4000, warmup=floor(iter/2), thin=1,
alternative="greater", sig.level=0.025,
nsim, seed=sample.int(.Machine$integer.max,1))
{
reject <- NULL
theta  <- NULL
ov     <- NULL
set.seed(seed)
for(ss in 1:nsim){
indata <- trial.simulation.cont(
n.CT=n.CT, n.CC=n.CC, n.ECp=n.ECp,
out.mean.CT=out.mean.CT, out.sd.CT=out.sd.CT,
out.mean.CC=out.mean.CC, out.sd.CC=out.sd.CC,
driftdiff=driftdiff, out.sd.EC=out.sd.EC,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC)
f1 <- as.formula(paste("study~",paste(psmatch.cov,collapse="+"),sep=""))
out.psmatch <- psmatch(
formula=f1, data=indata, n.EC=n.EC,
method.psest=method.psest, method.pslink=method.pslink,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
indata.match <- rbind(indata[indata$study==1,],indata[out.psmatch$subjid.EC,])
f2 <- as.formula(paste("y~",paste(analysis.cov,collapse="+"),sep=""))
out.commensurate <- commensurate.cont(
formula=f2, data=indata.match, method.borrow=method.borrow,
chains=chains, iter=iter, warmup=warmup, thin=thin,
alternative=alternative, sig.level=sig.level)
reject <- rbind(reject,data.frame(sim=ss,out.commensurate$reject))
theta  <- rbind(theta,data.frame(sim=ss,out.commensurate$theta))
data.ps <- out.psmatch$data.ps
Z1 <- data.ps[(data.ps$study==1)&(data.ps$treat==1),]
Z2 <- rbind(data.ps[(data.ps$study==1)&(data.ps$treat==0),],data.ps[out.psmatch$subjid.EC,])
pslist <- list(Z1=Z1[,"ps"],Z2=Z2[,"ps"])
ov.ps  <- (overlap(pslist,boundaries=c(0,1)))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor="ps",type="continuous",comparison="CTvsCC.EC",ov=ov.ps))
for(i in 1:length(psmatch.cov)){
covlist  <- list(Z1=Z1[,psmatch.cov[i]],Z2=Z2[,psmatch.cov[i]])
if(cov.C[[i]]$dist=="norm"){
ov.cov <- (overlap(covlist))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor=psmatch.cov[i],type="continuous",comparison="CTvsCC.EC",ov=ov.cov))
}else if(cov.C[[i]]$dist=="binom"){
ov.cov <- mean(covlist$Z1)-mean(covlist$Z2)
ov     <- rbind(ov,data.frame(sim=ss,factor=psmatch.cov[i],type="binary",comparison="CTvsCC.EC",ov=ov.cov))
}
}
Z1 <- data.ps[(data.ps$study==1)&(data.ps$treat==0),]
Z2 <- data.ps[out.psmatch$subjid.EC,]
pslist <- list(Z1=Z1[,"ps"],Z2=Z2[,"ps"])
ov.ps  <- (overlap(pslist,boundaries=c(0,1)))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor="ps",type="continuous",comparison="CCvsEC",ov=ov.ps))
for(i in 1:length(psmatch.cov)){
covlist  <- list(Z1=Z1[,psmatch.cov[i]],Z2=Z2[,psmatch.cov[i]])
if(cov.C[[i]]$dist=="norm"){
ov.cov <- (overlap(covlist))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor=psmatch.cov[i],type="continuous",comparison="CCvsEC",ov=ov.cov))
}else if(cov.C[[i]]$dist=="binom"){
ov.cov <- mean(covlist$Z1)-mean(covlist$Z2)
ov     <- rbind(ov,data.frame(sim=ss,factor=psmatch.cov[i],type="binary",comparison="CCvsEC",ov=ov.cov))
}
}
}
t.theta <- out.mean.CT-out.mean.CC
return(list(reject=reject,theta=theta,ov=ov,
n.CT=n.CT,n.CC=n.CC,n.ECp=n.ECp,n.EC=n.EC,drift=driftdiff,
true.theta=t.theta,
method.psest=method.psest,method.pslink=method.pslink,
method.whomatch=method.whomatch,
method.matching=method.matching,method.psorder=method.psorder))
}
psborrow.cont(
n.CT=n.CT, n.CC=n.CC, n.ECp=n.ECp, n.EC=n.EC,
out.mean.CT=out.mean.CT, out.sd.CT=out.sd.CT,
out.mean.CC=out.mean.CC, out.sd.CC=out.sd.CC,
driftdiff=driftdiff, out.sd.EC=out.sd.EC,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC,
psmatch.cov=psmatch.cov, method.whomatch=method.whomatch,
method.matching=method.matching, method.psorder=method.psorder,
analysis.cov=analysis.cov, method.borrow=method.borrow,
nsim=nsim, seed=100)
trial.simulation.bin <- function(
n.CT, n.CC, n.ECp,
out.prob.CT, out.prob.CC, driftOR,
cov.C, cov.cor.C, cov.effect.C,
cov.EC, cov.cor.EC, cov.effect.EC)
{
ncov        <- length(cov.C)
out.prob.EC <- (driftOR*out.prob.CC/(1-out.prob.CC))/(1+driftOR*out.prob.CC/(1-out.prob.CC))
lcov.effect.C  <- log(cov.effect.C)
lcov.effect.EC <- log(cov.effect.EC)
marg.C  <- NULL
marg.EC <- NULL
mean.C  <- NULL
mean.EC <- NULL
cov.lab <- NULL
for(i in 1:ncov){
if(cov.C[[i]]$dist=="norm"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(mean=cov.C[[i]]$mean, sd=cov.C[[i]]$sd))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(mean=cov.EC[[i]]$mean,sd=cov.EC[[i]]$sd))))
mean.C  <- c(mean.C, cov.C[[i]]$mean)
mean.EC <- c(mean.EC,cov.EC[[i]]$mean)
cov.lab <- c(cov.lab,cov.C[[i]]$lab)
}else if(cov.C[[i]]$dist=="binom"){
marg.C  <- append(marg.C, list(list(dist=cov.C[[i]]$dist, parm=list(size=1,prob=cov.C[[i]]$prob))))
marg.EC <- append(marg.EC,list(list(dist=cov.EC[[i]]$dist,parm=list(size=1,prob=cov.EC[[i]]$prob))))
mean.C  <- c(mean.C, cov.C[[i]]$prob)
mean.EC <- c(mean.EC,cov.EC[[i]]$prob)
cov.lab <- c(cov.lab,cov.C[[i]]$lab)
}
}
int.C   <- log(out.prob.CC/(1-out.prob.CC))-sum(mean.C*lcov.effect.C)
int.EC  <- log(out.prob.EC/(1-out.prob.EC))-sum(mean.EC*lcov.effect.EC)
t.theta <- log(out.prob.CT/(1-out.prob.CT))-log(out.prob.CC/(1-out.prob.CC))
cvec.C  <- cov.cor.C[lower.tri(cov.cor.C)]
cvec.EC <- cov.cor.EC[lower.tri(cov.cor.EC)]
data.cov.CT  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CT)
data.cov.CC  <- datagen(margdist=marg.C, corvec=cvec.C, nsim=n.CC)
data.cov.ECp <- datagen(margdist=marg.EC,corvec=cvec.EC,nsim=n.ECp)
p.CT  <- boot::inv.logit(int.C +t.theta+apply(data.cov.CT, 1,function(x){sum(x*lcov.effect.C)}))
p.CC  <- boot::inv.logit(int.C         +apply(data.cov.CC, 1,function(x){sum(x*lcov.effect.C)}))
p.ECp <- boot::inv.logit(int.EC        +apply(data.cov.ECp,1,function(x){sum(x*lcov.effect.EC)}))
data.CT  <- cbind(rbinom(n.CT, 1,p.CT), data.cov.CT)
data.CC  <- cbind(rbinom(n.CC, 1,p.CC), data.cov.CC)
data.ECp <- cbind(rbinom(n.ECp,1,p.ECp),data.cov.ECp)
outdata <- rbind(
data.frame(study=1,treat=1,y=data.CT[,1], data.CT[,-1]),
data.frame(study=1,treat=0,y=data.CC[,1], data.CC[,-1]),
data.frame(study=0,treat=0,y=data.ECp[,1],data.ECp[,-1]))
colnames(outdata) <- c("study","treat","y",cov.lab)
return(outdata)
}
psborrow.bin <- function(
n.CT, n.CC, n.ECp, n.EC,
out.prob.CT, out.prob.CC, driftOR,
cov.C, cov.cor.C, cov.effect.C,
cov.EC, cov.cor.EC, cov.effect.EC,
psmatch.cov,
method.psest="glm", method.pslink="logit",
method.whomatch, method.matching, method.psorder, n.boot=100,
analysis.cov, method.borrow,
chains=2, iter=4000, warmup=floor(iter/2), thin=1,
alternative="greater", sig.level=0.025, nsim, seed=NULL)
{
reject <- NULL
theta  <- NULL
ov     <- NULL
set.seed(seed)
for(ss in 1:nsim){
indata <- trial.simulation.bin(
n.CT=n.CT, n.CC=n.CC, n.ECp=n.ECp,
out.prob.CT=out.prob.CT, out.prob.CC=out.prob.CC, driftOR=driftOR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC)
f1 <- as.formula(paste("study~",paste(psmatch.cov,collapse="+"),sep=""))
out.psmatch <- psmatch(
formula=f1, data=indata, n.EC=n.EC,
method.psest=method.psest, method.pslink=method.pslink,
method.whomatch=method.whomatch, method.matching=method.matching,
method.psorder=method.psorder)
indata.match <- rbind(indata[indata$study==1,],indata[out.psmatch$subjid.EC,])
f2 <- as.formula(paste("y~",paste(analysis.cov,collapse="+"),sep=""))
out.commensurate <- commensurate.bin(
formula=f2, data=indata.match, method.borrow=method.borrow,
chains=chains, iter=iter, warmup=warmup, thin=thin,
alternative=alternative, sig.level=sig.level)
reject <- rbind(reject,data.frame(sim=ss,out.commensurate$reject))
theta  <- rbind(theta,data.frame(sim=ss,out.commensurate$theta))
data.ps <- out.psmatch$data.ps
Z1 <- data.ps[(data.ps$study==1)&(data.ps$treat==1),]
Z2 <- rbind(data.ps[(data.ps$study==1)&(data.ps$treat==0),],data.ps[out.psmatch$subjid.EC,])
pslist <- list(Z1=Z1[,"ps"],Z2=Z2[,"ps"])
ov.ps  <- (overlap(pslist,boundaries=c(0,1)))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor="ps",type="continuous",comparison="CTvsCC.EC",ov=ov.ps))
for(i in 1:length(psmatch.cov)){
covlist  <- list(Z1=Z1[,psmatch.cov[i]],Z2=Z2[,psmatch.cov[i]])
if(cov.C[[i]]$dist=="norm"){
ov.cov <- (overlap(covlist))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor=psmatch.cov[i],type="continuous",comparison="CTvsCC.EC",ov=ov.cov))
}else if(cov.C[[i]]$dist=="binom"){
ov.cov <- mean(covlist$Z1)-mean(covlist$Z2)
ov     <- rbind(ov,data.frame(sim=ss,factor=psmatch.cov[i],type="binary",comparison="CTvsCC.EC",ov=ov.cov))
}
}
Z1 <- data.ps[(data.ps$study==1)&(data.ps$treat==0),]
Z2 <- data.ps[out.psmatch$subjid.EC,]
pslist <- list(Z1=Z1[,"ps"],Z2=Z2[,"ps"])
ov.ps  <- (overlap(pslist,boundaries=c(0,1)))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor="ps",type="continuous",comparison="CCvsEC",ov=ov.ps))
for(i in 1:length(psmatch.cov)){
covlist  <- list(Z1=Z1[,psmatch.cov[i]],Z2=Z2[,psmatch.cov[i]])
if(cov.C[[i]]$dist=="norm"){
ov.cov <- (overlap(covlist))$OV
ov     <- rbind(ov,data.frame(sim=ss,factor=psmatch.cov[i],type="continuous",comparison="CCvsEC",ov=ov.cov))
}else if(cov.C[[i]]$dist=="binom"){
ov.cov <- mean(covlist$Z1)-mean(covlist$Z2)
ov     <- rbind(ov,data.frame(sim=ss,factor=psmatch.cov[i],type="binary",comparison="CCvsEC",ov=ov.cov))
}
}
}
t.theta <- log(out.prob.CT/(1-out.prob.CT))-log(out.prob.CC/(1-out.prob.CC))
return(list(reject=reject,theta=theta,ov=ov,
n.CT=n.CT,n.CC=n.CC,n.ECp=n.ECp,n.EC=n.EC,drift=driftOR,
true.theta=t.theta,
method.psest=method.psest,method.pslink=method.pslink,
method.whomatch=method.whomatch,
method.matching=method.matching,method.psorder=method.psorder))
}
n.CT       <- 100
n.CC       <- 50
n.ECp      <- 1000
n.EC       <- 50
out.prob.CT <- 0.2
out.prob.CC <- 0.2
driftOR     <- 1.0
cov.C <- list(list(dist="norm",mean=0,sd=1,lab="cov1"),
list(dist="binom",prob=0.4,lab="cov2"))
cov.cor.C <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.C <- c(0.1,0.1)
cov.EC <- list(list(dist="norm",mean=0,sd=1,lab="cov1"),
list(dist="binom",prob=0.4,lab="cov2"))
cov.cor.EC <- rbind(c(  1,0.1),
c(0.1,  1))
cov.effect.EC <- c(0.1,0.1)
psmatch.cov <- c("cov1","cov2")
method.whomatch <- "conc.treat"
method.matching <- "optimal"
method.psorder  <- NULL
analysis.cov <- c("cov1")
method.borrow <- list(list(prior="noborrow"),
list(prior="normal",scale=0.5))
nsim <- 5
psborrow.bin(
n.CT=n.CT, n.CC=n.CC, n.ECp=n.ECp, n.EC=n.EC,
out.prob.CT=out.prob.CT, out.prob.CC=out.prob.CC, driftOR=driftOR,
cov.C=cov.C, cov.cor.C=cov.cor.C, cov.effect.C=cov.effect.C,
cov.EC=cov.EC, cov.cor.EC=cov.cor.EC, cov.effect.EC=cov.effect.EC,
psmatch.cov=psmatch.cov, method.whomatch=method.whomatch,
method.matching=method.matching, method.psorder=method.psorder,
analysis.cov=analysis.cov, method.borrow=method.borrow,
nsim=nsim, seed=100)
library(psBayesborrow)
psborrow.bin
